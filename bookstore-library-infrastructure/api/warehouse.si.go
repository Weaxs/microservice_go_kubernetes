// Code generated by Kitex v0.6.1. DO NOT EDIT.

package api

import (
	"context"
	warehouse "github.com/Weaxs/microservice_go_kubernetes/bookstore-library-infrastructure/domain"
	kitex "github.com/cloudwego/kitex/pkg/serviceinfo"
	streaming "github.com/cloudwego/kitex/pkg/streaming"
)

var WarehouseApiServiceInfo = newWarehouseServiceInfo()

func newWarehouseServiceInfo() *kitex.ServiceInfo {
	serviceName := "WarehouseApi"
	handlerType := (*WarehouseApi)(nil)
	methods := map[string]kitex.MethodInfo{
		"GetAllAdvertisements": kitex.NewMethodInfo(getAllAdvertisementsHandler, newGetAllAdvertisementsArgs, newGetAllAdvertisementsResult, false),
		"GetAllProducts":       kitex.NewMethodInfo(getAllProductsHandler, newGetAllProductsArgs, newGetAllProductsResult, false),
		"GetProduct":           kitex.NewMethodInfo(getProductHandler, newGetProductArgs, newGetProductResult, false),
		"CreateProduct":        kitex.NewMethodInfo(createProductHandler, newCreateProductArgs, newCreateProductResult, false),
		"UpdateProduct":        kitex.NewMethodInfo(updateProductHandler, newUpdateProductArgs, newUpdateProductResult, false),
		"RemoveProduct":        kitex.NewMethodInfo(removeProductHandler, newRemoveProductArgs, newRemoveProductResult, false),
		"UpdateStockpile":      kitex.NewMethodInfo(updateStockpileHandler, newUpdateStockpileArgs, newUpdateStockpileResult, false),
		"QueryStockpile":       kitex.NewMethodInfo(queryStockpileHandler, newQueryStockpileArgs, newQueryStockpileResult, false),
		"SetDeliveredStatus":   kitex.NewMethodInfo(setDeliveredStatusHandler, newSetDeliveredStatusArgs, newSetDeliveredStatusResult, false),
	}
	extra := map[string]interface{}{
		"PackageName": "warehouse",
	}
	svcInfo := &kitex.ServiceInfo{
		ServiceName:     serviceName,
		HandlerType:     handlerType,
		Methods:         methods,
		PayloadCodec:    kitex.Protobuf,
		KiteXGenVersion: "v0.6.1",
		Extra:           extra,
	}
	return svcInfo
}

func getAllAdvertisementsHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(warehouse.EmptyResponse)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(WarehouseApi).GetAllAdvertisements(ctx, req)
		if err != nil {
			return err
		}
		if err := st.SendMsg(resp); err != nil {
			return err
		}
	case *warehouse.GetAllAdvertisementsArgs:
		success, err := handler.(WarehouseApi).GetAllAdvertisements(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*warehouse.GetAllAdvertisementsResult)
		realResult.Success = success
	}
	return nil
}

func getAllProductsHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(warehouse.EmptyResponse)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(WarehouseApi).GetAllProducts(ctx, req)
		if err != nil {
			return err
		}
		if err := st.SendMsg(resp); err != nil {
			return err
		}
	case *warehouse.GetAllProductsArgs:
		success, err := handler.(WarehouseApi).GetAllProducts(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*warehouse.GetAllProductsResult)
		realResult.Success = success
	}
	return nil
}

func getProductHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(warehouse.GetProductRequest)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(WarehouseApi).GetProduct(ctx, req)
		if err != nil {
			return err
		}
		if err := st.SendMsg(resp); err != nil {
			return err
		}
	case *warehouse.GetProductArgs:
		success, err := handler.(WarehouseApi).GetProduct(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*warehouse.GetProductResult)
		realResult.Success = success
	}
	return nil
}

func createProductHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(warehouse.ChangeProductRequest)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(WarehouseApi).CreateProduct(ctx, req)
		if err != nil {
			return err
		}
		if err := st.SendMsg(resp); err != nil {
			return err
		}
	case *warehouse.CreateProductArgs:
		success, err := handler.(WarehouseApi).CreateProduct(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*warehouse.CreateProductResult)
		realResult.Success = success
	}
	return nil
}

func updateProductHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(warehouse.ChangeProductRequest)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(WarehouseApi).UpdateProduct(ctx, req)
		if err != nil {
			return err
		}
		if err := st.SendMsg(resp); err != nil {
			return err
		}
	case *warehouse.UpdateProductArgs:
		success, err := handler.(WarehouseApi).UpdateProduct(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*warehouse.UpdateProductResult)
		realResult.Success = success
	}
	return nil
}

func removeProductHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(warehouse.RemoveProductRequest)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(WarehouseApi).RemoveProduct(ctx, req)
		if err != nil {
			return err
		}
		if err := st.SendMsg(resp); err != nil {
			return err
		}
	case *warehouse.RemoveProductArgs:
		success, err := handler.(WarehouseApi).RemoveProduct(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*warehouse.RemoveProductResult)
		realResult.Success = success
	}
	return nil
}

func updateStockpileHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(warehouse.UpdateStockpileRequest)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(WarehouseApi).UpdateStockpile(ctx, req)
		if err != nil {
			return err
		}
		if err := st.SendMsg(resp); err != nil {
			return err
		}
	case *warehouse.UpdateStockpileArgs:
		success, err := handler.(WarehouseApi).UpdateStockpile(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*warehouse.UpdateStockpileResult)
		realResult.Success = success
	}
	return nil
}

func queryStockpileHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(warehouse.QueryStockpileRequest)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(WarehouseApi).QueryStockpile(ctx, req)
		if err != nil {
			return err
		}
		if err := st.SendMsg(resp); err != nil {
			return err
		}
	case *warehouse.QueryStockpileArgs:
		success, err := handler.(WarehouseApi).QueryStockpile(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*warehouse.QueryStockpileResult)
		realResult.Success = success
	}
	return nil
}

func setDeliveredStatusHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	switch s := arg.(type) {
	case *streaming.Args:
		st := s.Stream
		req := new(warehouse.SetDeliveredStatusRequest)
		if err := st.RecvMsg(req); err != nil {
			return err
		}
		resp, err := handler.(WarehouseApi).SetDeliveredStatus(ctx, req)
		if err != nil {
			return err
		}
		if err := st.SendMsg(resp); err != nil {
			return err
		}
	case *warehouse.SetDeliveredStatusArgs:
		success, err := handler.(WarehouseApi).SetDeliveredStatus(ctx, s.Req)
		if err != nil {
			return err
		}
		realResult := result.(*warehouse.SetDeliveredStatusResult)
		realResult.Success = success
	}
	return nil
}

func newGetProductArgs() interface{} {
	return &warehouse.GetProductArgs{}
}

func newGetProductResult() interface{} {
	return &warehouse.GetProductResult{}
}
func newCreateProductArgs() interface{} {
	return &warehouse.CreateProductArgs{}
}
func newCreateProductResult() interface{} {
	return &warehouse.CreateProductResult{}
}
func newUpdateProductArgs() interface{} {
	return &warehouse.UpdateProductArgs{}
}
func newUpdateProductResult() interface{} {
	return &warehouse.UpdateProductResult{}
}
func newRemoveProductArgs() interface{} {
	return &warehouse.RemoveProductArgs{}
}
func newRemoveProductResult() interface{} {
	return &warehouse.RemoveProductResult{}
}
func newQueryStockpileArgs() interface{} {
	return &warehouse.QueryStockpileArgs{}
}
func newQueryStockpileResult() interface{} {
	return &warehouse.QueryStockpileResult{}
}
func newUpdateStockpileArgs() interface{} {
	return &warehouse.UpdateStockpileArgs{}
}
func newUpdateStockpileResult() interface{} {
	return &warehouse.UpdateStockpileResult{}
}
func newSetDeliveredStatusArgs() interface{} {
	return &warehouse.SetDeliveredStatusArgs{}
}
func newSetDeliveredStatusResult() interface{} {
	return &warehouse.SetDeliveredStatusResult{}
}
func newGetAllAdvertisementsArgs() interface{} {
	return &warehouse.GetAllAdvertisementsArgs{}
}
func newGetAllAdvertisementsResult() interface{} {
	return &warehouse.GetAllAdvertisementsResult{}
}
func newGetAllProductsArgs() interface{} {
	return &warehouse.GetAllProductsArgs{}
}
func newGetAllProductsResult() interface{} {
	return &warehouse.GetAllProductsResult{}
}
