// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1
// 	protoc        v3.21.12
// source: payment.proto

package domain

import (
	"context"
	"fmt"
	"github.com/cloudwego/fastpb"
	"google.golang.org/protobuf/proto"
	"google.golang.org/protobuf/reflect/protoreflect"
	"google.golang.org/protobuf/runtime/protoimpl"
	"google.golang.org/protobuf/types/known/timestamppb"
	"reflect"
	"sync"
	"time"
)

var (
	UpdatePaymentStateAliasResult_Success_DEFAULT *Empty
	ExecuteSettlementArgs_Req_DEFAULT             *ExecuteSettlementRequest
	ExecuteSettlementResult_Success_DEFAULT       *ExecuteSettlementResponse
	UpdatePaymentStateArgs_Req_DEFAULT            *UpdatePaymentStateRequest
	UpdatePaymentStateResult_Success_DEFAULT      *Empty
	UpdatePaymentStateAliasArgs_Req_DEFAULT       *UpdatePaymentStateAlias
)

var (
	fieldIDToName_Item = map[int32]string{
		1: "Amount",
		2: "ProductId",
	}
	fieldIDToName_Purchase = map[int32]string{
		1: "Delivery",
		2: "Name",
		3: "Telephone",
		4: "Location",
	}
	fieldIDToName_Payment = map[int32]string{
		1: "CreateTime",
		2: "PayId",
		3: "TotalPrice",
		4: "Expires",
		5: "PaymentLink",
		6: "PayState",
	}
	fieldIDToName_Settlement = map[int32]string{
		1: "Items",
		2: "Purchase",
		3: "ProductMap",
	}
	fieldIDToName_ExecuteSettlementRequest = map[int32]string{
		1: "Settlement",
	}
	fieldIDToName_ExecuteSettlementResponse = map[int32]string{
		1: "Payment",
	}
	fieldIDToName_UpdatePaymentStateRequest = map[int32]string{
		1: "PayId",
		2: "State",
	}
	fieldIDToName_UpdatePaymentStateAlias = map[int32]string{
		1: "PayId",
		2: "AccountId",
		3: "State",
	}
)

func (x PaymentState) Enum() *PaymentState {
	p := new(PaymentState)
	*p = x
	return p
}

func (x PaymentState) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PaymentState) Descriptor() protoreflect.EnumDescriptor {
	return file_payment_proto_enumTypes[0].Descriptor()
}

func (PaymentState) Type() protoreflect.EnumType {
	return &file_payment_proto_enumTypes[0]
}

func (x PaymentState) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PaymentState.Descriptor instead.
func (PaymentState) EnumDescriptor() ([]byte, []int) {
	return file_payment_proto_rawDescGZIP(), []int{0}
}

func (x *Item) Reset() {
	*x = Item{}
	if protoimpl.UnsafeEnabled {
		mi := &file_payment_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Item) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Item) ProtoMessage() {}

func (x *Item) ProtoReflect() protoreflect.Message {
	mi := &file_payment_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Item.ProtoReflect.Descriptor instead.
func (*Item) Descriptor() ([]byte, []int) {
	return file_payment_proto_rawDescGZIP(), []int{0}
}

func (x *Item) GetAmount() int64 {
	if x != nil {
		return x.Amount
	}
	return 0
}

func (x *Item) GetProductId() int64 {
	if x != nil {
		return x.ProductId
	}
	return 0
}

func (x *Purchase) Reset() {
	*x = Purchase{}
	if protoimpl.UnsafeEnabled {
		mi := &file_payment_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Purchase) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Purchase) ProtoMessage() {}

func (x *Purchase) ProtoReflect() protoreflect.Message {
	mi := &file_payment_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Purchase.ProtoReflect.Descriptor instead.
func (*Purchase) Descriptor() ([]byte, []int) {
	return file_payment_proto_rawDescGZIP(), []int{1}
}

func (x *Purchase) GetDelivery() bool {
	if x != nil {
		return x.Delivery
	}
	return false
}

func (x *Purchase) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Purchase) GetTelephone() string {
	if x != nil {
		return x.Telephone
	}
	return ""
}

func (x *Purchase) GetLocation() string {
	if x != nil {
		return x.Location
	}
	return ""
}

func (x *Payment) Reset() {
	*x = Payment{}
	if protoimpl.UnsafeEnabled {
		mi := &file_payment_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Payment) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Payment) ProtoMessage() {}

func (x *Payment) ProtoReflect() protoreflect.Message {
	mi := &file_payment_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Payment.ProtoReflect.Descriptor instead.
func (*Payment) Descriptor() ([]byte, []int) {
	return file_payment_proto_rawDescGZIP(), []int{2}
}

func (x *Payment) GetCreateTime() *timestamppb.Timestamp {
	if x != nil {
		return x.CreateTime
	}
	return nil
}

func (x *Payment) GetPayId() string {
	if x != nil {
		return x.PayId
	}
	return ""
}

func (x *Payment) GetTotalPrice() float64 {
	if x != nil {
		return x.TotalPrice
	}
	return 0
}

func (x *Payment) GetExpires() int64 {
	if x != nil {
		return x.Expires
	}
	return 0
}

func (x *Payment) GetPaymentLink() string {
	if x != nil {
		return x.PaymentLink
	}
	return ""
}

func (x *Payment) GetPayState() PaymentState {
	if x != nil {
		return x.PayState
	}
	return PaymentState_WAITING
}

func (x *Settlement) Reset() {
	*x = Settlement{}
	if protoimpl.UnsafeEnabled {
		mi := &file_payment_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Settlement) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Settlement) ProtoMessage() {}

func (x *Settlement) ProtoReflect() protoreflect.Message {
	mi := &file_payment_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Settlement.ProtoReflect.Descriptor instead.
func (*Settlement) Descriptor() ([]byte, []int) {
	return file_payment_proto_rawDescGZIP(), []int{3}
}

func (x *Settlement) GetItems() []*Item {
	if x != nil {
		return x.Items
	}
	return nil
}

func (x *Settlement) GetPurchase() *Purchase {
	if x != nil {
		return x.Purchase
	}
	return nil
}

func (x *Settlement) GetProductMap() map[int64]*Product {
	if x != nil {
		return x.ProductMap
	}
	return nil
}

func (x *ExecuteSettlementRequest) Reset() {
	*x = ExecuteSettlementRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_payment_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExecuteSettlementRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExecuteSettlementRequest) ProtoMessage() {}

func (x *ExecuteSettlementRequest) ProtoReflect() protoreflect.Message {
	mi := &file_payment_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExecuteSettlementRequest.ProtoReflect.Descriptor instead.
func (*ExecuteSettlementRequest) Descriptor() ([]byte, []int) {
	return file_payment_proto_rawDescGZIP(), []int{4}
}

func (x *ExecuteSettlementRequest) GetSettlement() *Settlement {
	if x != nil {
		return x.Settlement
	}
	return nil
}

func (x *ExecuteSettlementResponse) Reset() {
	*x = ExecuteSettlementResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_payment_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExecuteSettlementResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExecuteSettlementResponse) ProtoMessage() {}

func (x *ExecuteSettlementResponse) ProtoReflect() protoreflect.Message {
	mi := &file_payment_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExecuteSettlementResponse.ProtoReflect.Descriptor instead.
func (*ExecuteSettlementResponse) Descriptor() ([]byte, []int) {
	return file_payment_proto_rawDescGZIP(), []int{5}
}

func (x *ExecuteSettlementResponse) GetPayment() *Payment {
	if x != nil {
		return x.Payment
	}
	return nil
}

func (x *UpdatePaymentStateRequest) Reset() {
	*x = UpdatePaymentStateRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_payment_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdatePaymentStateRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdatePaymentStateRequest) ProtoMessage() {}

func (x *UpdatePaymentStateRequest) ProtoReflect() protoreflect.Message {
	mi := &file_payment_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdatePaymentStateRequest.ProtoReflect.Descriptor instead.
func (*UpdatePaymentStateRequest) Descriptor() ([]byte, []int) {
	return file_payment_proto_rawDescGZIP(), []int{6}
}

func (x *UpdatePaymentStateRequest) GetPayId() string {
	if x != nil {
		return x.PayId
	}
	return ""
}

func (x *UpdatePaymentStateRequest) GetState() PaymentState {
	if x != nil {
		return x.State
	}
	return PaymentState_WAITING
}

func (x *UpdatePaymentStateAlias) Reset() {
	*x = UpdatePaymentStateAlias{}
	if protoimpl.UnsafeEnabled {
		mi := &file_payment_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdatePaymentStateAlias) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdatePaymentStateAlias) ProtoMessage() {}

func (x *UpdatePaymentStateAlias) ProtoReflect() protoreflect.Message {
	mi := &file_payment_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdatePaymentStateAlias.ProtoReflect.Descriptor instead.
func (*UpdatePaymentStateAlias) Descriptor() ([]byte, []int) {
	return file_payment_proto_rawDescGZIP(), []int{7}
}

func (x *UpdatePaymentStateAlias) GetPayId() string {
	if x != nil {
		return x.PayId
	}
	return ""
}

func (x *UpdatePaymentStateAlias) GetAccountId() int64 {
	if x != nil {
		return x.AccountId
	}
	return 0
}

func (x *UpdatePaymentStateAlias) GetState() PaymentState {
	if x != nil {
		return x.State
	}
	return PaymentState_WAITING
}

var File_payment_proto protoreflect.FileDescriptor

var file_payment_proto_rawDesc = []byte{
	0x0a, 0x0d, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12,
	0x07, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x1a, 0x0f, 0x77, 0x61, 0x72, 0x65, 0x68, 0x6f,
	0x75, 0x73, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x3c, 0x0a, 0x04, 0x49, 0x74,
	0x65, 0x6d, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x70, 0x72,
	0x6f, 0x64, 0x75, 0x63, 0x74, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x70,
	0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x49, 0x64, 0x22, 0x74, 0x0a, 0x08, 0x50, 0x75, 0x72, 0x63,
	0x68, 0x61, 0x73, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x64, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x64, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x79,
	0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x65, 0x6c, 0x65, 0x70, 0x68, 0x6f, 0x6e,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x74, 0x65, 0x6c, 0x65, 0x70, 0x68, 0x6f,
	0x6e, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0xea,
	0x01, 0x0a, 0x07, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x3a, 0x0a, 0x0a, 0x63, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0a, 0x63, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x70, 0x61, 0x79, 0x49, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x70, 0x61, 0x79, 0x49, 0x64, 0x12, 0x1e, 0x0a, 0x0a,
	0x74, 0x6f, 0x74, 0x61, 0x6c, 0x50, 0x72, 0x69, 0x63, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x01,
	0x52, 0x0a, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x18, 0x0a, 0x07,
	0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x65,
	0x78, 0x70, 0x69, 0x72, 0x65, 0x73, 0x12, 0x20, 0x0a, 0x0b, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e,
	0x74, 0x4c, 0x69, 0x6e, 0x6b, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x70, 0x61, 0x79,
	0x6d, 0x65, 0x6e, 0x74, 0x4c, 0x69, 0x6e, 0x6b, 0x12, 0x31, 0x0a, 0x08, 0x70, 0x61, 0x79, 0x53,
	0x74, 0x61, 0x74, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x15, 0x2e, 0x70, 0x61, 0x79,
	0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74,
	0x65, 0x52, 0x08, 0x70, 0x61, 0x79, 0x53, 0x74, 0x61, 0x74, 0x65, 0x22, 0xf8, 0x01, 0x0a, 0x0a,
	0x53, 0x65, 0x74, 0x74, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x23, 0x0a, 0x05, 0x69, 0x74,
	0x65, 0x6d, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x70, 0x61, 0x79, 0x6d,
	0x65, 0x6e, 0x74, 0x2e, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x12,
	0x2d, 0x0a, 0x08, 0x70, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x11, 0x2e, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x50, 0x75, 0x72, 0x63,
	0x68, 0x61, 0x73, 0x65, 0x52, 0x08, 0x70, 0x75, 0x72, 0x63, 0x68, 0x61, 0x73, 0x65, 0x12, 0x43,
	0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x4d, 0x61, 0x70, 0x18, 0x03, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x23, 0x2e, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x53, 0x65, 0x74,
	0x74, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x4d,
	0x61, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0a, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74,
	0x4d, 0x61, 0x70, 0x1a, 0x51, 0x0a, 0x0f, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x4d, 0x61,
	0x70, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x28, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x77, 0x61, 0x72, 0x65, 0x68, 0x6f,
	0x75, 0x73, 0x65, 0x2e, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x52, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x4f, 0x0a, 0x18, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74,
	0x65, 0x53, 0x65, 0x74, 0x74, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x33, 0x0a, 0x0a, 0x73, 0x65, 0x74, 0x74, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74,
	0x2e, 0x53, 0x65, 0x74, 0x74, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x0a, 0x73, 0x65, 0x74,
	0x74, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x22, 0x47, 0x0a, 0x19, 0x45, 0x78, 0x65, 0x63, 0x75,
	0x74, 0x65, 0x53, 0x65, 0x74, 0x74, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2a, 0x0a, 0x07, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x2e,
	0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x07, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74,
	0x22, 0x5e, 0x0a, 0x19, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e,
	0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x14, 0x0a,
	0x05, 0x70, 0x61, 0x79, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x70, 0x61,
	0x79, 0x49, 0x64, 0x12, 0x2b, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x15, 0x2e, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x50, 0x61, 0x79,
	0x6d, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65,
	0x22, 0x7a, 0x0a, 0x17, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e,
	0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x41, 0x6c, 0x69, 0x61, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x70,
	0x61, 0x79, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x70, 0x61, 0x79, 0x49,
	0x64, 0x12, 0x1c, 0x0a, 0x09, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x49, 0x64, 0x12,
	0x2b, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x15,
	0x2e, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74,
	0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2a, 0x50, 0x0a, 0x0c,
	0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x0b, 0x0a, 0x07,
	0x57, 0x41, 0x49, 0x54, 0x49, 0x4e, 0x47, 0x10, 0x00, 0x12, 0x0a, 0x0a, 0x06, 0x43, 0x41, 0x4e,
	0x43, 0x45, 0x4c, 0x10, 0x01, 0x12, 0x09, 0x0a, 0x05, 0x50, 0x41, 0x59, 0x45, 0x44, 0x10, 0x02,
	0x12, 0x0b, 0x0a, 0x07, 0x54, 0x49, 0x4d, 0x45, 0x4f, 0x55, 0x54, 0x10, 0x03, 0x12, 0x0f, 0x0a,
	0x0b, 0x4e, 0x4f, 0x54, 0x5f, 0x53, 0x55, 0x50, 0x50, 0x4f, 0x52, 0x54, 0x10, 0x04, 0x32, 0x93,
	0x02, 0x0a, 0x0a, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x41, 0x70, 0x69, 0x12, 0x5a, 0x0a,
	0x11, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x65, 0x53, 0x65, 0x74, 0x74, 0x6c, 0x65, 0x6d, 0x65,
	0x6e, 0x74, 0x12, 0x21, 0x2e, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x45, 0x78, 0x65,
	0x63, 0x75, 0x74, 0x65, 0x53, 0x65, 0x74, 0x74, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x22, 0x2e, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x2e,
	0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x65, 0x53, 0x65, 0x74, 0x74, 0x6c, 0x65, 0x6d, 0x65, 0x6e,
	0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x52, 0x0a, 0x12, 0x75, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12,
	0x22, 0x2e, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x18, 0x2e, 0x77, 0x61, 0x72, 0x65, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x2e,
	0x45, 0x6d, 0x70, 0x74, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x55, 0x0a,
	0x17, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x53, 0x74,
	0x61, 0x74, 0x65, 0x41, 0x6c, 0x69, 0x61, 0x73, 0x12, 0x20, 0x2e, 0x70, 0x61, 0x79, 0x6d, 0x65,
	0x6e, 0x74, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74,
	0x53, 0x74, 0x61, 0x74, 0x65, 0x41, 0x6c, 0x69, 0x61, 0x73, 0x1a, 0x18, 0x2e, 0x77, 0x61, 0x72,
	0x65, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x42, 0x91, 0x01, 0x5a, 0x8e, 0x01, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62,
	0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x57, 0x65, 0x61, 0x78, 0x73, 0x2f, 0x6d, 0x69, 0x63, 0x72, 0x6f,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x67, 0x6f, 0x5f, 0x6b, 0x75, 0x62, 0x65, 0x72,
	0x6e, 0x65, 0x74, 0x65, 0x73, 0x2f, 0x62, 0x6f, 0x6f, 0x6b, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x2d,
	0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x2d, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x2f, 0x6b,
	0x69, 0x74, 0x65, 0x78, 0x5f, 0x67, 0x65, 0x6e, 0x2f, 0x6d, 0x69, 0x63, 0x72, 0x6f, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x67, 0x6f, 0x5f, 0x6b, 0x75, 0x62, 0x65, 0x72, 0x6e, 0x65,
	0x74, 0x65, 0x73, 0x2f, 0x62, 0x6f, 0x6f, 0x6b, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x2d, 0x64, 0x6f,
	0x6d, 0x61, 0x69, 0x6e, 0x2d, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x2f, 0x69, 0x64, 0x6c,
	0x2f, 0x70, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_payment_proto_rawDescOnce sync.Once
	file_payment_proto_rawDescData = file_payment_proto_rawDesc
)

func file_payment_proto_rawDescGZIP() []byte {
	file_payment_proto_rawDescOnce.Do(func() {
		file_payment_proto_rawDescData = protoimpl.X.CompressGZIP(file_payment_proto_rawDescData)
	})
	return file_payment_proto_rawDescData
}

var file_payment_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_payment_proto_msgTypes = make([]protoimpl.MessageInfo, 9)
var file_payment_proto_goTypes = []interface{}{
	(PaymentState)(0),                 // 0: payment.PaymentState
	(*Item)(nil),                      // 1: payment.Item
	(*Purchase)(nil),                  // 2: payment.Purchase
	(*Payment)(nil),                   // 3: payment.Payment
	(*Settlement)(nil),                // 4: payment.Settlement
	(*ExecuteSettlementRequest)(nil),  // 5: payment.ExecuteSettlementRequest
	(*ExecuteSettlementResponse)(nil), // 6: payment.ExecuteSettlementResponse
	(*UpdatePaymentStateRequest)(nil), // 7: payment.UpdatePaymentStateRequest
	(*UpdatePaymentStateAlias)(nil),   // 8: payment.UpdatePaymentStateAlias
	nil,                               // 9: payment.Settlement.ProductMapEntry
	(*timestamppb.Timestamp)(nil),     // 10: google.protobuf.Timestamp
	(*Product)(nil),                   // 11: domain.Product
	(*Empty)(nil),                     // 12: domain.Empty
}
var file_payment_proto_depIdxs = []int32{
	10, // 0: payment.Payment.createTime:type_name -> google.protobuf.Timestamp
	0,  // 1: payment.Payment.payState:type_name -> payment.PaymentState
	1,  // 2: payment.Settlement.items:type_name -> payment.Item
	2,  // 3: payment.Settlement.purchase:type_name -> payment.Purchase
	9,  // 4: payment.Settlement.productMap:type_name -> payment.Settlement.ProductMapEntry
	4,  // 5: payment.ExecuteSettlementRequest.settlement:type_name -> payment.Settlement
	3,  // 6: payment.ExecuteSettlementResponse.payment:type_name -> payment.Payment
	0,  // 7: payment.UpdatePaymentStateRequest.state:type_name -> payment.PaymentState
	0,  // 8: payment.UpdatePaymentStateAlias.state:type_name -> payment.PaymentState
	11, // 9: payment.Settlement.ProductMapEntry.value:type_name -> domain.Product
	5,  // 10: payment.PaymentApi.executeSettlement:input_type -> payment.ExecuteSettlementRequest
	7,  // 11: payment.PaymentApi.updatePaymentState:input_type -> payment.UpdatePaymentStateRequest
	8,  // 12: payment.PaymentApi.updatePaymentStateAlias:input_type -> payment.UpdatePaymentStateAlias
	6,  // 13: payment.PaymentApi.executeSettlement:output_type -> payment.ExecuteSettlementResponse
	12, // 14: payment.PaymentApi.updatePaymentState:output_type -> domain.Empty
	12, // 15: payment.PaymentApi.updatePaymentStateAlias:output_type -> domain.Empty
	13, // [13:16] is the sub-list for method output_type
	10, // [10:13] is the sub-list for method input_type
	10, // [10:10] is the sub-list for extension type_name
	10, // [10:10] is the sub-list for extension extendee
	0,  // [0:10] is the sub-list for field type_name
}

func init() { file_payment_proto_init() }
func file_payment_proto_init() {
	if File_payment_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_payment_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Item); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_payment_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Purchase); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_payment_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Payment); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_payment_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Settlement); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_payment_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExecuteSettlementRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_payment_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExecuteSettlementResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_payment_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdatePaymentStateRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_payment_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdatePaymentStateAlias); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_payment_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   9,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_payment_proto_goTypes,
		DependencyIndexes: file_payment_proto_depIdxs,
		EnumInfos:         file_payment_proto_enumTypes,
		MessageInfos:      file_payment_proto_msgTypes,
	}.Build()
	File_payment_proto = out.File
	file_payment_proto_rawDesc = nil
	file_payment_proto_goTypes = nil
	file_payment_proto_depIdxs = nil
}

// Code generated by Kitex v0.6.1. DO NOT EDIT.

type PaymentApi interface {
	ExecuteSettlement(ctx context.Context, req *ExecuteSettlementRequest) (res *ExecuteSettlementResponse, err error)
	UpdatePaymentState(ctx context.Context, req *UpdatePaymentStateRequest) (res *Empty, err error)
	UpdatePaymentStateAlias(ctx context.Context, req *UpdatePaymentStateAlias) (res *Empty, err error)
}

func (x *Item) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 2:
		offset, err = x.fastReadField2(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_Item[number], err)
}

func (x *Item) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	x.Amount, offset, err = fastpb.ReadInt64(buf, _type)
	return offset, err
}

func (x *Item) fastReadField2(buf []byte, _type int8) (offset int, err error) {
	x.ProductId, offset, err = fastpb.ReadInt64(buf, _type)
	return offset, err
}

func (x *Purchase) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 2:
		offset, err = x.fastReadField2(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 3:
		offset, err = x.fastReadField3(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 4:
		offset, err = x.fastReadField4(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_Purchase[number], err)
}

func (x *Purchase) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	x.Delivery, offset, err = fastpb.ReadBool(buf, _type)
	return offset, err
}

func (x *Purchase) fastReadField2(buf []byte, _type int8) (offset int, err error) {
	x.Name, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *Purchase) fastReadField3(buf []byte, _type int8) (offset int, err error) {
	x.Telephone, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *Purchase) fastReadField4(buf []byte, _type int8) (offset int, err error) {
	x.Location, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *Payment) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 2:
		offset, err = x.fastReadField2(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 3:
		offset, err = x.fastReadField3(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 4:
		offset, err = x.fastReadField4(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 5:
		offset, err = x.fastReadField5(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 6:
		offset, err = x.fastReadField6(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_Payment[number], err)
}

// Timestamp 特殊处理，只保留到秒级别
func (x *Payment) fastReadField1(buf []byte, _type int8) (offset int, err error) {

	value, offset, err := fastpb.ReadString(buf, _type)
	if err != nil {
		return offset, err
	}
	timestamp, _ := time.Parse(time.RFC3339Nano, value)
	x.CreateTime = &timestamppb.Timestamp{Seconds: timestamp.Unix(), Nanos: int32(timestamp.Nanosecond())}
	return offset, nil
}

func (x *Payment) fastReadField2(buf []byte, _type int8) (offset int, err error) {
	x.PayId, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *Payment) fastReadField3(buf []byte, _type int8) (offset int, err error) {
	x.TotalPrice, offset, err = fastpb.ReadDouble(buf, _type)
	return offset, err
}

func (x *Payment) fastReadField4(buf []byte, _type int8) (offset int, err error) {
	x.Expires, offset, err = fastpb.ReadInt64(buf, _type)
	return offset, err
}

func (x *Payment) fastReadField5(buf []byte, _type int8) (offset int, err error) {
	x.PaymentLink, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *Payment) fastReadField6(buf []byte, _type int8) (offset int, err error) {
	var v int32
	v, offset, err = fastpb.ReadInt32(buf, _type)
	if err != nil {
		return offset, err
	}
	x.PayState = PaymentState(v)
	return offset, nil
}

func (x *Settlement) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 2:
		offset, err = x.fastReadField2(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 3:
		offset, err = x.fastReadField3(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_Settlement[number], err)
}

func (x *Settlement) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	var v Item
	offset, err = fastpb.ReadMessage(buf, _type, &v)
	if err != nil {
		return offset, err
	}
	x.Items = append(x.Items, &v)
	return offset, nil
}

func (x *Settlement) fastReadField2(buf []byte, _type int8) (offset int, err error) {
	var v Purchase
	offset, err = fastpb.ReadMessage(buf, _type, &v)
	if err != nil {
		return offset, err
	}
	x.Purchase = &v
	return offset, nil
}

func (x *Settlement) fastReadField3(buf []byte, _type int8) (offset int, err error) {
	if x.ProductMap == nil {
		x.ProductMap = make(map[int64]*Product)
	}
	var key int64
	var value *Product
	offset, err = fastpb.ReadMapEntry(buf, _type,
		func(buf []byte, _type int8) (offset int, err error) {
			key, offset, err = fastpb.ReadInt64(buf, _type)
			return offset, err
		},
		func(buf []byte, _type int8) (offset int, err error) {
			var v Product
			offset, err = fastpb.ReadMessage(buf, _type, &v)
			if err != nil {
				return offset, err
			}
			value = &v
			return offset, nil
		})
	if err != nil {
		return offset, err
	}
	x.ProductMap[key] = value
	return offset, nil
}

func (x *ExecuteSettlementRequest) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_ExecuteSettlementRequest[number], err)
}

func (x *ExecuteSettlementRequest) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	var v Settlement
	offset, err = fastpb.ReadMessage(buf, _type, &v)
	if err != nil {
		return offset, err
	}
	x.Settlement = &v
	return offset, nil
}

func (x *ExecuteSettlementResponse) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_ExecuteSettlementResponse[number], err)
}

func (x *ExecuteSettlementResponse) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	var v Payment
	offset, err = fastpb.ReadMessage(buf, _type, &v)
	if err != nil {
		return offset, err
	}
	x.Payment = &v
	return offset, nil
}

func (x *UpdatePaymentStateRequest) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 2:
		offset, err = x.fastReadField2(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_UpdatePaymentStateRequest[number], err)
}

func (x *UpdatePaymentStateRequest) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	x.PayId, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *UpdatePaymentStateRequest) fastReadField2(buf []byte, _type int8) (offset int, err error) {
	var v int32
	v, offset, err = fastpb.ReadInt32(buf, _type)
	if err != nil {
		return offset, err
	}
	x.State = PaymentState(v)
	return offset, nil
}

func (x *UpdatePaymentStateAlias) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 2:
		offset, err = x.fastReadField2(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 3:
		offset, err = x.fastReadField3(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_UpdatePaymentStateAlias[number], err)
}

func (x *UpdatePaymentStateAlias) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	x.PayId, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *UpdatePaymentStateAlias) fastReadField2(buf []byte, _type int8) (offset int, err error) {
	x.AccountId, offset, err = fastpb.ReadInt64(buf, _type)
	return offset, err
}

func (x *UpdatePaymentStateAlias) fastReadField3(buf []byte, _type int8) (offset int, err error) {
	var v int32
	v, offset, err = fastpb.ReadInt32(buf, _type)
	if err != nil {
		return offset, err
	}
	x.State = PaymentState(v)
	return offset, nil
}

func (x *Item) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	offset += x.fastWriteField2(buf[offset:])
	return offset
}

func (x *Item) fastWriteField1(buf []byte) (offset int) {
	if x.Amount == 0 {
		return offset
	}
	offset += fastpb.WriteInt64(buf[offset:], 1, x.GetAmount())
	return offset
}

func (x *Item) fastWriteField2(buf []byte) (offset int) {
	if x.ProductId == 0 {
		return offset
	}
	offset += fastpb.WriteInt64(buf[offset:], 2, x.GetProductId())
	return offset
}

func (x *Purchase) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	offset += x.fastWriteField2(buf[offset:])
	offset += x.fastWriteField3(buf[offset:])
	offset += x.fastWriteField4(buf[offset:])
	return offset
}

func (x *Purchase) fastWriteField1(buf []byte) (offset int) {
	if !x.Delivery {
		return offset
	}
	offset += fastpb.WriteBool(buf[offset:], 1, x.GetDelivery())
	return offset
}

func (x *Purchase) fastWriteField2(buf []byte) (offset int) {
	if x.Name == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 2, x.GetName())
	return offset
}

func (x *Purchase) fastWriteField3(buf []byte) (offset int) {
	if x.Telephone == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 3, x.GetTelephone())
	return offset
}

func (x *Purchase) fastWriteField4(buf []byte) (offset int) {
	if x.Location == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 4, x.GetLocation())
	return offset
}

func (x *Payment) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	offset += x.fastWriteField2(buf[offset:])
	offset += x.fastWriteField3(buf[offset:])
	offset += x.fastWriteField4(buf[offset:])
	offset += x.fastWriteField5(buf[offset:])
	offset += x.fastWriteField6(buf[offset:])
	return offset
}

func (x *Payment) fastWriteField1(buf []byte) (offset int) {
	if x.CreateTime == nil {
		return offset
	}
	timestamp := x.GetCreateTime().AsTime()
	offset += fastpb.WriteString(buf[offset:], 1, timestamp.Format(time.RFC3339Nano))
	return offset
}

func (x *Payment) fastWriteField2(buf []byte) (offset int) {
	if x.PayId == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 2, x.GetPayId())
	return offset
}

func (x *Payment) fastWriteField3(buf []byte) (offset int) {
	if x.TotalPrice == 0 {
		return offset
	}
	offset += fastpb.WriteDouble(buf[offset:], 3, x.GetTotalPrice())
	return offset
}

func (x *Payment) fastWriteField4(buf []byte) (offset int) {
	if x.Expires == 0 {
		return offset
	}
	offset += fastpb.WriteInt64(buf[offset:], 4, x.GetExpires())
	return offset
}

func (x *Payment) fastWriteField5(buf []byte) (offset int) {
	if x.PaymentLink == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 5, x.GetPaymentLink())
	return offset
}

func (x *Payment) fastWriteField6(buf []byte) (offset int) {
	if x.PayState == 0 {
		return offset
	}
	offset += fastpb.WriteInt32(buf[offset:], 6, int32(x.GetPayState()))
	return offset
}

func (x *Settlement) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	offset += x.fastWriteField2(buf[offset:])
	offset += x.fastWriteField3(buf[offset:])
	return offset
}

func (x *Settlement) fastWriteField1(buf []byte) (offset int) {
	if x.Items == nil {
		return offset
	}
	for i := range x.GetItems() {
		offset += fastpb.WriteMessage(buf[offset:], 1, x.GetItems()[i])
	}
	return offset
}

func (x *Settlement) fastWriteField2(buf []byte) (offset int) {
	if x.Purchase == nil {
		return offset
	}
	offset += fastpb.WriteMessage(buf[offset:], 2, x.GetPurchase())
	return offset
}

func (x *Settlement) fastWriteField3(buf []byte) (offset int) {
	if x.ProductMap == nil {
		return offset
	}
	for k, v := range x.GetProductMap() {
		offset += fastpb.WriteMapEntry(buf[offset:], 3,
			func(buf []byte, numTagOrKey, numIdxOrVal int32) int {
				offset := 0
				offset += fastpb.WriteInt64(buf[offset:], numTagOrKey, k)
				offset += fastpb.WriteMessage(buf[offset:], numIdxOrVal, v)
				return offset
			})
	}
	return offset
}

func (x *ExecuteSettlementRequest) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	return offset
}

func (x *ExecuteSettlementRequest) fastWriteField1(buf []byte) (offset int) {
	if x.Settlement == nil {
		return offset
	}
	offset += fastpb.WriteMessage(buf[offset:], 1, x.GetSettlement())
	return offset
}

func (x *ExecuteSettlementResponse) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	return offset
}

func (x *ExecuteSettlementResponse) fastWriteField1(buf []byte) (offset int) {
	if x.Payment == nil {
		return offset
	}
	offset += fastpb.WriteMessage(buf[offset:], 1, x.GetPayment())
	return offset
}

func (x *UpdatePaymentStateRequest) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	offset += x.fastWriteField2(buf[offset:])
	return offset
}

func (x *UpdatePaymentStateRequest) fastWriteField1(buf []byte) (offset int) {
	if x.PayId == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 1, x.GetPayId())
	return offset
}

func (x *UpdatePaymentStateRequest) fastWriteField2(buf []byte) (offset int) {
	if x.State == 0 {
		return offset
	}
	offset += fastpb.WriteInt32(buf[offset:], 2, int32(x.GetState()))
	return offset
}

func (x *UpdatePaymentStateAlias) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	offset += x.fastWriteField2(buf[offset:])
	offset += x.fastWriteField3(buf[offset:])
	return offset
}

func (x *UpdatePaymentStateAlias) fastWriteField1(buf []byte) (offset int) {
	if x.PayId == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 1, x.GetPayId())
	return offset
}

func (x *UpdatePaymentStateAlias) fastWriteField2(buf []byte) (offset int) {
	if x.AccountId == 0 {
		return offset
	}
	offset += fastpb.WriteInt64(buf[offset:], 2, x.GetAccountId())
	return offset
}

func (x *UpdatePaymentStateAlias) fastWriteField3(buf []byte) (offset int) {
	if x.State == 0 {
		return offset
	}
	offset += fastpb.WriteInt32(buf[offset:], 3, int32(x.GetState()))
	return offset
}

func (x *Item) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	n += x.sizeField2()
	return n
}

func (x *Item) sizeField1() (n int) {
	if x.Amount == 0 {
		return n
	}
	n += fastpb.SizeInt64(1, x.GetAmount())
	return n
}

func (x *Item) sizeField2() (n int) {
	if x.ProductId == 0 {
		return n
	}
	n += fastpb.SizeInt64(2, x.GetProductId())
	return n
}

func (x *Purchase) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	n += x.sizeField2()
	n += x.sizeField3()
	n += x.sizeField4()
	return n
}

func (x *Purchase) sizeField1() (n int) {
	if !x.Delivery {
		return n
	}
	n += fastpb.SizeBool(1, x.GetDelivery())
	return n
}

func (x *Purchase) sizeField2() (n int) {
	if x.Name == "" {
		return n
	}
	n += fastpb.SizeString(2, x.GetName())
	return n
}

func (x *Purchase) sizeField3() (n int) {
	if x.Telephone == "" {
		return n
	}
	n += fastpb.SizeString(3, x.GetTelephone())
	return n
}

func (x *Purchase) sizeField4() (n int) {
	if x.Location == "" {
		return n
	}
	n += fastpb.SizeString(4, x.GetLocation())
	return n
}

func (x *Payment) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	n += x.sizeField2()
	n += x.sizeField3()
	n += x.sizeField4()
	n += x.sizeField5()
	n += x.sizeField6()
	return n
}

func (x *Payment) sizeField1() (n int) {
	if x.CreateTime == nil {
		return n
	}
	timestamp := x.GetCreateTime().AsTime()
	n += fastpb.SizeString(1, timestamp.Format(time.RFC3339Nano))
	return n
}

func (x *Payment) sizeField2() (n int) {
	if x.PayId == "" {
		return n
	}
	n += fastpb.SizeString(2, x.GetPayId())
	return n
}

func (x *Payment) sizeField3() (n int) {
	if x.TotalPrice == 0 {
		return n
	}
	n += fastpb.SizeDouble(3, x.GetTotalPrice())
	return n
}

func (x *Payment) sizeField4() (n int) {
	if x.Expires == 0 {
		return n
	}
	n += fastpb.SizeInt64(4, x.GetExpires())
	return n
}

func (x *Payment) sizeField5() (n int) {
	if x.PaymentLink == "" {
		return n
	}
	n += fastpb.SizeString(5, x.GetPaymentLink())
	return n
}

func (x *Payment) sizeField6() (n int) {
	if x.PayState == 0 {
		return n
	}
	n += fastpb.SizeInt32(6, int32(x.GetPayState()))
	return n
}

func (x *Settlement) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	n += x.sizeField2()
	n += x.sizeField3()
	return n
}

func (x *Settlement) sizeField1() (n int) {
	if x.Items == nil {
		return n
	}
	for i := range x.GetItems() {
		n += fastpb.SizeMessage(1, x.GetItems()[i])
	}
	return n
}

func (x *Settlement) sizeField2() (n int) {
	if x.Purchase == nil {
		return n
	}
	n += fastpb.SizeMessage(2, x.GetPurchase())
	return n
}

func (x *Settlement) sizeField3() (n int) {
	if x.ProductMap == nil {
		return n
	}
	for k, v := range x.GetProductMap() {
		n += fastpb.SizeMapEntry(3,
			func(numTagOrKey, numIdxOrVal int32) int {
				n := 0
				n += fastpb.SizeInt64(numTagOrKey, k)
				n += fastpb.SizeMessage(numIdxOrVal, v)
				return n
			})
	}
	return n
}

func (x *ExecuteSettlementRequest) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	return n
}

func (x *ExecuteSettlementRequest) sizeField1() (n int) {
	if x.Settlement == nil {
		return n
	}
	n += fastpb.SizeMessage(1, x.GetSettlement())
	return n
}

func (x *ExecuteSettlementResponse) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	return n
}

func (x *ExecuteSettlementResponse) sizeField1() (n int) {
	if x.Payment == nil {
		return n
	}
	n += fastpb.SizeMessage(1, x.GetPayment())
	return n
}

func (x *UpdatePaymentStateRequest) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	n += x.sizeField2()
	return n
}

func (x *UpdatePaymentStateRequest) sizeField1() (n int) {
	if x.PayId == "" {
		return n
	}
	n += fastpb.SizeString(1, x.GetPayId())
	return n
}

func (x *UpdatePaymentStateRequest) sizeField2() (n int) {
	if x.State == 0 {
		return n
	}
	n += fastpb.SizeInt32(2, int32(x.GetState()))
	return n
}

func (x *UpdatePaymentStateAlias) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	n += x.sizeField2()
	n += x.sizeField3()
	return n
}

func (x *UpdatePaymentStateAlias) sizeField1() (n int) {
	if x.PayId == "" {
		return n
	}
	n += fastpb.SizeString(1, x.GetPayId())
	return n
}

func (x *UpdatePaymentStateAlias) sizeField2() (n int) {
	if x.AccountId == 0 {
		return n
	}
	n += fastpb.SizeInt64(2, x.GetAccountId())
	return n
}

func (x *UpdatePaymentStateAlias) sizeField3() (n int) {
	if x.State == 0 {
		return n
	}
	n += fastpb.SizeInt32(3, int32(x.GetState()))
	return n
}

func (p *ExecuteSettlementArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(ExecuteSettlementRequest)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *ExecuteSettlementArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *ExecuteSettlementArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *ExecuteSettlementArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, fmt.Errorf("No req in ExecuteSettlementArgs")
	}
	return proto.Marshal(p.Req)
}

func (p *ExecuteSettlementArgs) Unmarshal(in []byte) error {
	msg := new(ExecuteSettlementRequest)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

func (p *ExecuteSettlementArgs) GetReq() *ExecuteSettlementRequest {
	if !p.IsSetReq() {
		return ExecuteSettlementArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *ExecuteSettlementArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *ExecuteSettlementArgs) GetFirstArgument() interface{} {
	return p.Req
}

func (p *ExecuteSettlementResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(ExecuteSettlementResponse)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *ExecuteSettlementResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *ExecuteSettlementResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *ExecuteSettlementResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, fmt.Errorf("No req in ExecuteSettlementResult")
	}
	return proto.Marshal(p.Success)
}

func (p *ExecuteSettlementResult) Unmarshal(in []byte) error {
	msg := new(ExecuteSettlementResponse)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *ExecuteSettlementResult) GetSuccess() *ExecuteSettlementResponse {
	if !p.IsSetSuccess() {
		return ExecuteSettlementResult_Success_DEFAULT
	}
	return p.Success
}

func (p *ExecuteSettlementResult) SetSuccess(x interface{}) {
	p.Success = x.(*ExecuteSettlementResponse)
}

func (p *ExecuteSettlementResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *ExecuteSettlementResult) GetResult() interface{} {
	return p.Success
}

func (p *UpdatePaymentStateArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(UpdatePaymentStateRequest)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *UpdatePaymentStateArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *UpdatePaymentStateArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *UpdatePaymentStateArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, fmt.Errorf("No req in UpdatePaymentStateArgs")
	}
	return proto.Marshal(p.Req)
}

func (p *UpdatePaymentStateArgs) Unmarshal(in []byte) error {
	msg := new(UpdatePaymentStateRequest)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

func (p *UpdatePaymentStateArgs) GetReq() *UpdatePaymentStateRequest {
	if !p.IsSetReq() {
		return UpdatePaymentStateArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *UpdatePaymentStateArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *UpdatePaymentStateArgs) GetFirstArgument() interface{} {
	return p.Req
}

func (p *UpdatePaymentStateResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(Empty)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *UpdatePaymentStateResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *UpdatePaymentStateResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *UpdatePaymentStateResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, fmt.Errorf("No req in UpdatePaymentStateResult")
	}
	return proto.Marshal(p.Success)
}

func (p *UpdatePaymentStateResult) Unmarshal(in []byte) error {
	msg := new(Empty)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *UpdatePaymentStateResult) GetSuccess() *Empty {
	if !p.IsSetSuccess() {
		return UpdatePaymentStateResult_Success_DEFAULT
	}
	return p.Success
}

func (p *UpdatePaymentStateResult) SetSuccess(x interface{}) {
	p.Success = x.(*Empty)
}

func (p *UpdatePaymentStateResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *UpdatePaymentStateResult) GetResult() interface{} {
	return p.Success
}

func (p *UpdatePaymentStateAliasArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(UpdatePaymentStateAlias)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *UpdatePaymentStateAliasArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *UpdatePaymentStateAliasArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *UpdatePaymentStateAliasArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, fmt.Errorf("No req in UpdatePaymentStateAliasArgs")
	}
	return proto.Marshal(p.Req)
}

func (p *UpdatePaymentStateAliasArgs) Unmarshal(in []byte) error {
	msg := new(UpdatePaymentStateAlias)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

func (p *UpdatePaymentStateAliasArgs) GetReq() *UpdatePaymentStateAlias {
	if !p.IsSetReq() {
		return UpdatePaymentStateAliasArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *UpdatePaymentStateAliasArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *UpdatePaymentStateAliasArgs) GetFirstArgument() interface{} {
	return p.Req
}

func (p *UpdatePaymentStateAliasResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(Empty)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *UpdatePaymentStateAliasResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *UpdatePaymentStateAliasResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *UpdatePaymentStateAliasResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, fmt.Errorf("No req in UpdatePaymentStateAliasResult")
	}
	return proto.Marshal(p.Success)
}

func (p *UpdatePaymentStateAliasResult) Unmarshal(in []byte) error {
	msg := new(Empty)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *UpdatePaymentStateAliasResult) GetSuccess() *Empty {
	if !p.IsSetSuccess() {
		return UpdatePaymentStateAliasResult_Success_DEFAULT
	}
	return p.Success
}

func (p *UpdatePaymentStateAliasResult) SetSuccess(x interface{}) {
	p.Success = x.(*Empty)
}

func (p *UpdatePaymentStateAliasResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *UpdatePaymentStateAliasResult) GetResult() interface{} {
	return p.Success
}
