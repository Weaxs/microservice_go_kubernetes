// Code generated by Fastpb v0.0.2. DO NOT EDIT.

package domain

import (
	"fmt"
	"github.com/cloudwego/fastpb"
	"github.com/golang/protobuf/proto"
	"google.golang.org/protobuf/reflect/protoreflect"
	"google.golang.org/protobuf/runtime/protoimpl"
	"reflect"
	"sync"
)

var (
	_ = fmt.Errorf
	_ = fastpb.Skip
)

var (
	fieldIDToName_Advertisement = map[int32]string{
		1: "Image",
		2: "ProductId",
	}
	fieldIDToName_Specification = map[int32]string{
		1: "Item",
		2: "Value",
		3: "ProductId",
	}
	fieldIDToName_Product = map[int32]string{
		1: "Title",
		2: "Price",
		3: "Rate",
		4: "Description",
		5: "Cover",
		6: "Detail",
		7: "Specifications",
	}
	fieldIDToName_Stockpile = map[int32]string{
		1: "Amount",
		2: "Frozen",
		3: "Product",
	}
	fieldIDToName_EmptyResponse                = map[int32]string{}
	fieldIDToName_GetAllAdvertisementsResponse = map[int32]string{
		1: "Advertisements",
	}
	fieldIDToName_GetAllProductResponse = map[int32]string{
		1: "Products",
	}
	fieldIDToName_GetProductRequest = map[int32]string{
		1: "Id",
	}
	fieldIDToName_RemoveProductRequest = map[int32]string{
		1: "Id",
	}
	fieldIDToName_GetProductResponse = map[int32]string{
		1: "Product",
	}
	fieldIDToName_ChangeProductRequest = map[int32]string{
		1: "Product",
	}
	fieldIDToName_UpdateStockpileRequest = map[int32]string{
		1: "ProductId",
		2: "Amount",
	}
	fieldIDToName_QueryStockpileRequest = map[int32]string{
		1: "ProductId",
	}
	fieldIDToName_QueryStockpileResponse = map[int32]string{
		1: "Stockpile",
	}
	fieldIDToName_SetDeliveredStatusRequest = map[int32]string{
		1: "ProductId",
		2: "Amount",
		3: "Status",
	}
)
var (
	QueryStockpileResult_Success_DEFAULT       *QueryStockpileResponse
	GetAllAdvertisementsArgs_Req_DEFAULT       *EmptyResponse
	GetAllAdvertisementsResult_Success_DEFAULT *GetAllAdvertisementsResponse
	GetProductResult_Success_DEFAULT           *GetProductResponse
	GetAllProductsResult_Success_DEFAULT       *GetAllProductResponse
	CreateProductResult_Success_DEFAULT        *EmptyResponse
	SetDeliveredStatusResult_Success_DEFAULT   *EmptyResponse
	GetAllProductsArgs_Req_DEFAULT             *EmptyResponse
	GetProductArgs_Req_DEFAULT                 *GetProductRequest
	CreateProductArgs_Req_DEFAULT              *ChangeProductRequest
	QueryStockpileArgs_Req_DEFAULT             *QueryStockpileRequest
	SetDeliveredStatusArgs_Req_DEFAULT         *SetDeliveredStatusRequest
	RemoveProductResult_Success_DEFAULT        *EmptyResponse
	UpdateStockpileResult_Success_DEFAULT      *EmptyResponse
	UpdateProductResult_Success_DEFAULT        *EmptyResponse
	UpdateProductArgs_Req_DEFAULT              *ChangeProductRequest
	RemoveProductArgs_Req_DEFAULT              *RemoveProductRequest
	UpdateStockpileArgs_Req_DEFAULT            *UpdateStockpileRequest
)

func (x *Advertisement) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 2:
		offset, err = x.fastReadField2(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_Advertisement[number], err)
}

func (x *Advertisement) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	x.Image, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *Advertisement) fastReadField2(buf []byte, _type int8) (offset int, err error) {
	x.ProductId, offset, err = fastpb.ReadInt64(buf, _type)
	return offset, err
}

func (x *Specification) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 2:
		offset, err = x.fastReadField2(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 3:
		offset, err = x.fastReadField3(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_Specification[number], err)
}

func (x *Specification) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	x.Item, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *Specification) fastReadField2(buf []byte, _type int8) (offset int, err error) {
	x.Value, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *Specification) fastReadField3(buf []byte, _type int8) (offset int, err error) {
	x.ProductId, offset, err = fastpb.ReadInt64(buf, _type)
	return offset, err
}

func (x *Product) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 2:
		offset, err = x.fastReadField2(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 3:
		offset, err = x.fastReadField3(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 4:
		offset, err = x.fastReadField4(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 5:
		offset, err = x.fastReadField5(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 6:
		offset, err = x.fastReadField6(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 7:
		offset, err = x.fastReadField7(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_Product[number], err)
}

func (x *Product) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	x.Title, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *Product) fastReadField2(buf []byte, _type int8) (offset int, err error) {
	x.Price, offset, err = fastpb.ReadDouble(buf, _type)
	return offset, err
}

func (x *Product) fastReadField3(buf []byte, _type int8) (offset int, err error) {
	x.Rate, offset, err = fastpb.ReadFloat(buf, _type)
	return offset, err
}

func (x *Product) fastReadField4(buf []byte, _type int8) (offset int, err error) {
	x.Description, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *Product) fastReadField5(buf []byte, _type int8) (offset int, err error) {
	x.Cover, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *Product) fastReadField6(buf []byte, _type int8) (offset int, err error) {
	x.Detail, offset, err = fastpb.ReadString(buf, _type)
	return offset, err
}

func (x *Product) fastReadField7(buf []byte, _type int8) (offset int, err error) {
	var v Specification
	offset, err = fastpb.ReadMessage(buf, _type, &v)
	if err != nil {
		return offset, err
	}
	x.Specifications = append(x.Specifications, &v)
	return offset, nil
}

func (x *Stockpile) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 2:
		offset, err = x.fastReadField2(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 3:
		offset, err = x.fastReadField3(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_Stockpile[number], err)
}

func (x *Stockpile) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	x.Amount, offset, err = fastpb.ReadInt64(buf, _type)
	return offset, err
}

func (x *Stockpile) fastReadField2(buf []byte, _type int8) (offset int, err error) {
	x.Frozen, offset, err = fastpb.ReadInt64(buf, _type)
	return offset, err
}

func (x *Stockpile) fastReadField3(buf []byte, _type int8) (offset int, err error) {
	var v Product
	offset, err = fastpb.ReadMessage(buf, _type, &v)
	if err != nil {
		return offset, err
	}
	x.Product = &v
	return offset, nil
}

func (x *EmptyResponse) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
}

func (x *GetAllAdvertisementsResponse) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_GetAllAdvertisementsResponse[number], err)
}

func (x *GetAllAdvertisementsResponse) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	var v Advertisement
	offset, err = fastpb.ReadMessage(buf, _type, &v)
	if err != nil {
		return offset, err
	}
	x.Advertisements = append(x.Advertisements, &v)
	return offset, nil
}

func (x *GetAllProductResponse) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_GetAllProductResponse[number], err)
}

func (x *GetAllProductResponse) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	var v Product
	offset, err = fastpb.ReadMessage(buf, _type, &v)
	if err != nil {
		return offset, err
	}
	x.Products = append(x.Products, &v)
	return offset, nil
}

func (x *GetProductRequest) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_GetProductRequest[number], err)
}

func (x *GetProductRequest) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	x.Id, offset, err = fastpb.ReadInt64(buf, _type)
	return offset, err
}

func (x *RemoveProductRequest) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_RemoveProductRequest[number], err)
}

func (x *RemoveProductRequest) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	x.Id, offset, err = fastpb.ReadInt64(buf, _type)
	return offset, err
}

func (x *GetProductResponse) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_GetProductResponse[number], err)
}

func (x *GetProductResponse) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	var v Product
	offset, err = fastpb.ReadMessage(buf, _type, &v)
	if err != nil {
		return offset, err
	}
	x.Product = &v
	return offset, nil
}

func (x *ChangeProductRequest) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_ChangeProductRequest[number], err)
}

func (x *ChangeProductRequest) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	var v Product
	offset, err = fastpb.ReadMessage(buf, _type, &v)
	if err != nil {
		return offset, err
	}
	x.Product = &v
	return offset, nil
}

func (x *UpdateStockpileRequest) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 2:
		offset, err = x.fastReadField2(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_UpdateStockpileRequest[number], err)
}

func (x *UpdateStockpileRequest) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	x.ProductId, offset, err = fastpb.ReadInt64(buf, _type)
	return offset, err
}

func (x *UpdateStockpileRequest) fastReadField2(buf []byte, _type int8) (offset int, err error) {
	x.Amount, offset, err = fastpb.ReadInt64(buf, _type)
	return offset, err
}

func (x *QueryStockpileRequest) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_QueryStockpileRequest[number], err)
}

func (x *QueryStockpileRequest) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	x.ProductId, offset, err = fastpb.ReadInt64(buf, _type)
	return offset, err
}

func (x *QueryStockpileResponse) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_QueryStockpileResponse[number], err)
}

func (x *QueryStockpileResponse) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	var v Stockpile
	offset, err = fastpb.ReadMessage(buf, _type, &v)
	if err != nil {
		return offset, err
	}
	x.Stockpile = &v
	return offset, nil
}

func (x *SetDeliveredStatusRequest) FastRead(buf []byte, _type int8, number int32) (offset int, err error) {
	switch number {
	case 1:
		offset, err = x.fastReadField1(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 2:
		offset, err = x.fastReadField2(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	case 3:
		offset, err = x.fastReadField3(buf, _type)
		if err != nil {
			goto ReadFieldError
		}
	default:
		offset, err = fastpb.Skip(buf, _type, number)
		if err != nil {
			goto SkipFieldError
		}
	}
	return offset, nil
SkipFieldError:
	return offset, fmt.Errorf("%T cannot parse invalid wire-format data, error: %s", x, err)
ReadFieldError:
	return offset, fmt.Errorf("%T read field %d '%s' error: %s", x, number, fieldIDToName_SetDeliveredStatusRequest[number], err)
}

func (x *SetDeliveredStatusRequest) fastReadField1(buf []byte, _type int8) (offset int, err error) {
	x.ProductId, offset, err = fastpb.ReadInt64(buf, _type)
	return offset, err
}

func (x *SetDeliveredStatusRequest) fastReadField2(buf []byte, _type int8) (offset int, err error) {
	x.Amount, offset, err = fastpb.ReadInt64(buf, _type)
	return offset, err
}

func (x *SetDeliveredStatusRequest) fastReadField3(buf []byte, _type int8) (offset int, err error) {
	var v int32
	v, offset, err = fastpb.ReadInt32(buf, _type)
	if err != nil {
		return offset, err
	}
	x.Status = DeliveredStatus(v)
	return offset, nil
}

func (x *Advertisement) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	offset += x.fastWriteField2(buf[offset:])
	return offset
}

func (x *Advertisement) fastWriteField1(buf []byte) (offset int) {
	if x.Image == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 1, x.GetImage())
	return offset
}

func (x *Advertisement) fastWriteField2(buf []byte) (offset int) {
	if x.ProductId == 0 {
		return offset
	}
	offset += fastpb.WriteInt64(buf[offset:], 2, x.GetProductId())
	return offset
}

func (x *Specification) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	offset += x.fastWriteField2(buf[offset:])
	offset += x.fastWriteField3(buf[offset:])
	return offset
}

func (x *Specification) fastWriteField1(buf []byte) (offset int) {
	if x.Item == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 1, x.GetItem())
	return offset
}

func (x *Specification) fastWriteField2(buf []byte) (offset int) {
	if x.Value == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 2, x.GetValue())
	return offset
}

func (x *Specification) fastWriteField3(buf []byte) (offset int) {
	if x.ProductId == 0 {
		return offset
	}
	offset += fastpb.WriteInt64(buf[offset:], 3, x.GetProductId())
	return offset
}

func (x *Product) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	offset += x.fastWriteField2(buf[offset:])
	offset += x.fastWriteField3(buf[offset:])
	offset += x.fastWriteField4(buf[offset:])
	offset += x.fastWriteField5(buf[offset:])
	offset += x.fastWriteField6(buf[offset:])
	offset += x.fastWriteField7(buf[offset:])
	return offset
}

func (x *Product) fastWriteField1(buf []byte) (offset int) {
	if x.Title == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 1, x.GetTitle())
	return offset
}

func (x *Product) fastWriteField2(buf []byte) (offset int) {
	if x.Price == 0 {
		return offset
	}
	offset += fastpb.WriteDouble(buf[offset:], 2, x.GetPrice())
	return offset
}

func (x *Product) fastWriteField3(buf []byte) (offset int) {
	if x.Rate == 0 {
		return offset
	}
	offset += fastpb.WriteFloat(buf[offset:], 3, x.GetRate())
	return offset
}

func (x *Product) fastWriteField4(buf []byte) (offset int) {
	if x.Description == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 4, x.GetDescription())
	return offset
}

func (x *Product) fastWriteField5(buf []byte) (offset int) {
	if x.Cover == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 5, x.GetCover())
	return offset
}

func (x *Product) fastWriteField6(buf []byte) (offset int) {
	if x.Detail == "" {
		return offset
	}
	offset += fastpb.WriteString(buf[offset:], 6, x.GetDetail())
	return offset
}

func (x *Product) fastWriteField7(buf []byte) (offset int) {
	if x.Specifications == nil {
		return offset
	}
	for i := range x.GetSpecifications() {
		offset += fastpb.WriteMessage(buf[offset:], 7, x.GetSpecifications()[i])
	}
	return offset
}

func (x *Stockpile) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	offset += x.fastWriteField2(buf[offset:])
	offset += x.fastWriteField3(buf[offset:])
	return offset
}

func (x *Stockpile) fastWriteField1(buf []byte) (offset int) {
	if x.Amount == 0 {
		return offset
	}
	offset += fastpb.WriteInt64(buf[offset:], 1, x.GetAmount())
	return offset
}

func (x *Stockpile) fastWriteField2(buf []byte) (offset int) {
	if x.Frozen == 0 {
		return offset
	}
	offset += fastpb.WriteInt64(buf[offset:], 2, x.GetFrozen())
	return offset
}

func (x *Stockpile) fastWriteField3(buf []byte) (offset int) {
	if x.Product == nil {
		return offset
	}
	offset += fastpb.WriteMessage(buf[offset:], 3, x.GetProduct())
	return offset
}

func (x *EmptyResponse) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	return offset
}

func (x *GetAllAdvertisementsResponse) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	return offset
}

func (x *GetAllAdvertisementsResponse) fastWriteField1(buf []byte) (offset int) {
	if x.Advertisements == nil {
		return offset
	}
	for i := range x.GetAdvertisements() {
		offset += fastpb.WriteMessage(buf[offset:], 1, x.GetAdvertisements()[i])
	}
	return offset
}

func (x *GetAllProductResponse) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	return offset
}

func (x *GetAllProductResponse) fastWriteField1(buf []byte) (offset int) {
	if x.Products == nil {
		return offset
	}
	for i := range x.GetProducts() {
		offset += fastpb.WriteMessage(buf[offset:], 1, x.GetProducts()[i])
	}
	return offset
}

func (x *GetProductRequest) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	return offset
}

func (x *GetProductRequest) fastWriteField1(buf []byte) (offset int) {
	if x.Id == 0 {
		return offset
	}
	offset += fastpb.WriteInt64(buf[offset:], 1, x.GetId())
	return offset
}

func (x *RemoveProductRequest) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	return offset
}

func (x *RemoveProductRequest) fastWriteField1(buf []byte) (offset int) {
	if x.Id == 0 {
		return offset
	}
	offset += fastpb.WriteInt64(buf[offset:], 1, x.GetId())
	return offset
}

func (x *GetProductResponse) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	return offset
}

func (x *GetProductResponse) fastWriteField1(buf []byte) (offset int) {
	if x.Product == nil {
		return offset
	}
	offset += fastpb.WriteMessage(buf[offset:], 1, x.GetProduct())
	return offset
}

func (x *ChangeProductRequest) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	return offset
}

func (x *ChangeProductRequest) fastWriteField1(buf []byte) (offset int) {
	if x.Product == nil {
		return offset
	}
	offset += fastpb.WriteMessage(buf[offset:], 1, x.GetProduct())
	return offset
}

func (x *UpdateStockpileRequest) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	offset += x.fastWriteField2(buf[offset:])
	return offset
}

func (x *UpdateStockpileRequest) fastWriteField1(buf []byte) (offset int) {
	if x.ProductId == 0 {
		return offset
	}
	offset += fastpb.WriteInt64(buf[offset:], 1, x.GetProductId())
	return offset
}

func (x *UpdateStockpileRequest) fastWriteField2(buf []byte) (offset int) {
	if x.Amount == 0 {
		return offset
	}
	offset += fastpb.WriteInt64(buf[offset:], 2, x.GetAmount())
	return offset
}

func (x *QueryStockpileRequest) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	return offset
}

func (x *QueryStockpileRequest) fastWriteField1(buf []byte) (offset int) {
	if x.ProductId == 0 {
		return offset
	}
	offset += fastpb.WriteInt64(buf[offset:], 1, x.GetProductId())
	return offset
}

func (x *QueryStockpileResponse) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	return offset
}

func (x *QueryStockpileResponse) fastWriteField1(buf []byte) (offset int) {
	if x.Stockpile == nil {
		return offset
	}
	offset += fastpb.WriteMessage(buf[offset:], 1, x.GetStockpile())
	return offset
}

func (x *SetDeliveredStatusRequest) FastWrite(buf []byte) (offset int) {
	if x == nil {
		return offset
	}
	offset += x.fastWriteField1(buf[offset:])
	offset += x.fastWriteField2(buf[offset:])
	offset += x.fastWriteField3(buf[offset:])
	return offset
}

func (x *SetDeliveredStatusRequest) fastWriteField1(buf []byte) (offset int) {
	if x.ProductId == 0 {
		return offset
	}
	offset += fastpb.WriteInt64(buf[offset:], 1, x.GetProductId())
	return offset
}

func (x *SetDeliveredStatusRequest) fastWriteField2(buf []byte) (offset int) {
	if x.Amount == 0 {
		return offset
	}
	offset += fastpb.WriteInt64(buf[offset:], 2, x.GetAmount())
	return offset
}

func (x *SetDeliveredStatusRequest) fastWriteField3(buf []byte) (offset int) {
	if x.Status == 0 {
		return offset
	}
	offset += fastpb.WriteInt32(buf[offset:], 3, int32(x.GetStatus()))
	return offset
}

func (x *Advertisement) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	n += x.sizeField2()
	return n
}

func (x *Advertisement) sizeField1() (n int) {
	if x.Image == "" {
		return n
	}
	n += fastpb.SizeString(1, x.GetImage())
	return n
}

func (x *Advertisement) sizeField2() (n int) {
	if x.ProductId == 0 {
		return n
	}
	n += fastpb.SizeInt64(2, x.GetProductId())
	return n
}

func (x *Specification) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	n += x.sizeField2()
	n += x.sizeField3()
	return n
}

func (x *Specification) sizeField1() (n int) {
	if x.Item == "" {
		return n
	}
	n += fastpb.SizeString(1, x.GetItem())
	return n
}

func (x *Specification) sizeField2() (n int) {
	if x.Value == "" {
		return n
	}
	n += fastpb.SizeString(2, x.GetValue())
	return n
}

func (x *Specification) sizeField3() (n int) {
	if x.ProductId == 0 {
		return n
	}
	n += fastpb.SizeInt64(3, x.GetProductId())
	return n
}

func (x *Product) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	n += x.sizeField2()
	n += x.sizeField3()
	n += x.sizeField4()
	n += x.sizeField5()
	n += x.sizeField6()
	n += x.sizeField7()
	return n
}

func (x *Product) sizeField1() (n int) {
	if x.Title == "" {
		return n
	}
	n += fastpb.SizeString(1, x.GetTitle())
	return n
}

func (x *Product) sizeField2() (n int) {
	if x.Price == 0 {
		return n
	}
	n += fastpb.SizeDouble(2, x.GetPrice())
	return n
}

func (x *Product) sizeField3() (n int) {
	if x.Rate == 0 {
		return n
	}
	n += fastpb.SizeFloat(3, x.GetRate())
	return n
}

func (x *Product) sizeField4() (n int) {
	if x.Description == "" {
		return n
	}
	n += fastpb.SizeString(4, x.GetDescription())
	return n
}

func (x *Product) sizeField5() (n int) {
	if x.Cover == "" {
		return n
	}
	n += fastpb.SizeString(5, x.GetCover())
	return n
}

func (x *Product) sizeField6() (n int) {
	if x.Detail == "" {
		return n
	}
	n += fastpb.SizeString(6, x.GetDetail())
	return n
}

func (x *Product) sizeField7() (n int) {
	if x.Specifications == nil {
		return n
	}
	for i := range x.GetSpecifications() {
		n += fastpb.SizeMessage(7, x.GetSpecifications()[i])
	}
	return n
}

func (x *Stockpile) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	n += x.sizeField2()
	n += x.sizeField3()
	return n
}

func (x *Stockpile) sizeField1() (n int) {
	if x.Amount == 0 {
		return n
	}
	n += fastpb.SizeInt64(1, x.GetAmount())
	return n
}

func (x *Stockpile) sizeField2() (n int) {
	if x.Frozen == 0 {
		return n
	}
	n += fastpb.SizeInt64(2, x.GetFrozen())
	return n
}

func (x *Stockpile) sizeField3() (n int) {
	if x.Product == nil {
		return n
	}
	n += fastpb.SizeMessage(3, x.GetProduct())
	return n
}

func (x *EmptyResponse) Size() (n int) {
	if x == nil {
		return n
	}
	return n
}

func (x *GetAllAdvertisementsResponse) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	return n
}

func (x *GetAllAdvertisementsResponse) sizeField1() (n int) {
	if x.Advertisements == nil {
		return n
	}
	for i := range x.GetAdvertisements() {
		n += fastpb.SizeMessage(1, x.GetAdvertisements()[i])
	}
	return n
}

func (x *GetAllProductResponse) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	return n
}

func (x *GetAllProductResponse) sizeField1() (n int) {
	if x.Products == nil {
		return n
	}
	for i := range x.GetProducts() {
		n += fastpb.SizeMessage(1, x.GetProducts()[i])
	}
	return n
}

func (x *GetProductRequest) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	return n
}

func (x *GetProductRequest) sizeField1() (n int) {
	if x.Id == 0 {
		return n
	}
	n += fastpb.SizeInt64(1, x.GetId())
	return n
}

func (x *RemoveProductRequest) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	return n
}

func (x *RemoveProductRequest) sizeField1() (n int) {
	if x.Id == 0 {
		return n
	}
	n += fastpb.SizeInt64(1, x.GetId())
	return n
}

func (x *GetProductResponse) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	return n
}

func (x *GetProductResponse) sizeField1() (n int) {
	if x.Product == nil {
		return n
	}
	n += fastpb.SizeMessage(1, x.GetProduct())
	return n
}

func (x *ChangeProductRequest) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	return n
}

func (x *ChangeProductRequest) sizeField1() (n int) {
	if x.Product == nil {
		return n
	}
	n += fastpb.SizeMessage(1, x.GetProduct())
	return n
}

func (x *UpdateStockpileRequest) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	n += x.sizeField2()
	return n
}

func (x *UpdateStockpileRequest) sizeField1() (n int) {
	if x.ProductId == 0 {
		return n
	}
	n += fastpb.SizeInt64(1, x.GetProductId())
	return n
}

func (x *UpdateStockpileRequest) sizeField2() (n int) {
	if x.Amount == 0 {
		return n
	}
	n += fastpb.SizeInt64(2, x.GetAmount())
	return n
}

func (x *QueryStockpileRequest) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	return n
}

func (x *QueryStockpileRequest) sizeField1() (n int) {
	if x.ProductId == 0 {
		return n
	}
	n += fastpb.SizeInt64(1, x.GetProductId())
	return n
}

func (x *QueryStockpileResponse) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	return n
}

func (x *QueryStockpileResponse) sizeField1() (n int) {
	if x.Stockpile == nil {
		return n
	}
	n += fastpb.SizeMessage(1, x.GetStockpile())
	return n
}

func (x *SetDeliveredStatusRequest) Size() (n int) {
	if x == nil {
		return n
	}
	n += x.sizeField1()
	n += x.sizeField2()
	n += x.sizeField3()
	return n
}

func (x *SetDeliveredStatusRequest) sizeField1() (n int) {
	if x.ProductId == 0 {
		return n
	}
	n += fastpb.SizeInt64(1, x.GetProductId())
	return n
}

func (x *SetDeliveredStatusRequest) sizeField2() (n int) {
	if x.Amount == 0 {
		return n
	}
	n += fastpb.SizeInt64(2, x.GetAmount())
	return n
}

func (x *SetDeliveredStatusRequest) sizeField3() (n int) {
	if x.Status == 0 {
		return n
	}
	n += fastpb.SizeInt32(3, int32(x.GetStatus()))
	return n
}

func (p *QueryStockpileResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(QueryStockpileResponse)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *QueryStockpileResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *QueryStockpileResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *QueryStockpileResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, fmt.Errorf("No req in QueryStockpileResult")
	}
	return proto.Marshal(p.Success)
}

func (p *QueryStockpileResult) Unmarshal(in []byte) error {
	msg := new(QueryStockpileResponse)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *QueryStockpileResult) GetSuccess() *QueryStockpileResponse {
	if !p.IsSetSuccess() {
		return QueryStockpileResult_Success_DEFAULT
	}
	return p.Success
}

func (p *QueryStockpileResult) SetSuccess(x interface{}) {
	p.Success = x.(*QueryStockpileResponse)
}

func (p *QueryStockpileResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *QueryStockpileResult) GetResult() interface{} {
	return p.Success
}

func (p *GetAllAdvertisementsArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(EmptyResponse)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *GetAllAdvertisementsArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *GetAllAdvertisementsArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *GetAllAdvertisementsArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, fmt.Errorf("No req in GetAllAdvertisementsArgs")
	}
	return proto.Marshal(p.Req)
}

func (p *GetAllAdvertisementsArgs) Unmarshal(in []byte) error {
	msg := new(EmptyResponse)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

func (p *GetAllAdvertisementsArgs) GetReq() *EmptyResponse {
	if !p.IsSetReq() {
		return GetAllAdvertisementsArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *GetAllAdvertisementsArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *GetAllAdvertisementsArgs) GetFirstArgument() interface{} {
	return p.Req
}

func (p *GetAllAdvertisementsResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(GetAllAdvertisementsResponse)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *GetAllAdvertisementsResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *GetAllAdvertisementsResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *GetAllAdvertisementsResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, fmt.Errorf("No req in GetAllAdvertisementsResult")
	}
	return proto.Marshal(p.Success)
}

func (p *GetAllAdvertisementsResult) Unmarshal(in []byte) error {
	msg := new(GetAllAdvertisementsResponse)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *GetAllAdvertisementsResult) GetSuccess() *GetAllAdvertisementsResponse {
	if !p.IsSetSuccess() {
		return GetAllAdvertisementsResult_Success_DEFAULT
	}
	return p.Success
}

func (p *GetAllAdvertisementsResult) SetSuccess(x interface{}) {
	p.Success = x.(*GetAllAdvertisementsResponse)
}

func (p *GetAllAdvertisementsResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *GetAllAdvertisementsResult) GetResult() interface{} {
	return p.Success
}

func (p *GetAllProductsArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(EmptyResponse)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *GetAllProductsArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *GetAllProductsArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *GetAllProductsArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, fmt.Errorf("No req in GetAllProductsArgs")
	}
	return proto.Marshal(p.Req)
}

func (p *GetAllProductsArgs) Unmarshal(in []byte) error {
	msg := new(EmptyResponse)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

func (p *GetAllProductsArgs) GetReq() *EmptyResponse {
	if !p.IsSetReq() {
		return GetAllProductsArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *GetAllProductsArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *GetAllProductsArgs) GetFirstArgument() interface{} {
	return p.Req
}

func (p *GetAllProductsResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(GetAllProductResponse)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *GetAllProductsResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *GetAllProductsResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *GetAllProductsResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, fmt.Errorf("No req in GetAllProductsResult")
	}
	return proto.Marshal(p.Success)
}

func (p *GetAllProductsResult) Unmarshal(in []byte) error {
	msg := new(GetAllProductResponse)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *GetAllProductsResult) GetSuccess() *GetAllProductResponse {
	if !p.IsSetSuccess() {
		return GetAllProductsResult_Success_DEFAULT
	}
	return p.Success
}

func (p *GetAllProductsResult) SetSuccess(x interface{}) {
	p.Success = x.(*GetAllProductResponse)
}

func (p *GetAllProductsResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *GetAllProductsResult) GetResult() interface{} {
	return p.Success
}

func (p *GetProductArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(GetProductRequest)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *GetProductArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *GetProductArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *GetProductArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, fmt.Errorf("No req in GetProductArgs")
	}
	return proto.Marshal(p.Req)
}

func (p *GetProductArgs) Unmarshal(in []byte) error {
	msg := new(GetProductRequest)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

func (p *GetProductArgs) GetReq() *GetProductRequest {
	if !p.IsSetReq() {
		return GetProductArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *GetProductArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *GetProductArgs) GetFirstArgument() interface{} {
	return p.Req
}

func (p *GetProductResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(GetProductResponse)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *GetProductResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *GetProductResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *GetProductResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, fmt.Errorf("No req in GetProductResult")
	}
	return proto.Marshal(p.Success)
}

func (p *GetProductResult) Unmarshal(in []byte) error {
	msg := new(GetProductResponse)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *GetProductResult) GetSuccess() *GetProductResponse {
	if !p.IsSetSuccess() {
		return GetProductResult_Success_DEFAULT
	}
	return p.Success
}

func (p *GetProductResult) SetSuccess(x interface{}) {
	p.Success = x.(*GetProductResponse)
}

func (p *GetProductResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *GetProductResult) GetResult() interface{} {
	return p.Success
}

func (p *CreateProductArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(ChangeProductRequest)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *CreateProductArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *CreateProductArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *CreateProductArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, fmt.Errorf("No req in CreateProductArgs")
	}
	return proto.Marshal(p.Req)
}

func (p *CreateProductArgs) Unmarshal(in []byte) error {
	msg := new(ChangeProductRequest)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

func (p *CreateProductArgs) GetReq() *ChangeProductRequest {
	if !p.IsSetReq() {
		return CreateProductArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *CreateProductArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *CreateProductArgs) GetFirstArgument() interface{} {
	return p.Req
}

func (p *CreateProductResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(EmptyResponse)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *CreateProductResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *CreateProductResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *CreateProductResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, fmt.Errorf("No req in CreateProductResult")
	}
	return proto.Marshal(p.Success)
}

func (p *CreateProductResult) Unmarshal(in []byte) error {
	msg := new(EmptyResponse)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *CreateProductResult) GetSuccess() *EmptyResponse {
	if !p.IsSetSuccess() {
		return CreateProductResult_Success_DEFAULT
	}
	return p.Success
}

func (p *CreateProductResult) SetSuccess(x interface{}) {
	p.Success = x.(*EmptyResponse)
}

func (p *CreateProductResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *CreateProductResult) GetResult() interface{} {
	return p.Success
}

func (p *QueryStockpileArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(QueryStockpileRequest)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *QueryStockpileArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *QueryStockpileArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *QueryStockpileArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, fmt.Errorf("No req in QueryStockpileArgs")
	}
	return proto.Marshal(p.Req)
}

func (p *QueryStockpileArgs) Unmarshal(in []byte) error {
	msg := new(QueryStockpileRequest)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

func (p *QueryStockpileArgs) GetReq() *QueryStockpileRequest {
	if !p.IsSetReq() {
		return QueryStockpileArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *QueryStockpileArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *QueryStockpileArgs) GetFirstArgument() interface{} {
	return p.Req
}

func (p *SetDeliveredStatusArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(SetDeliveredStatusRequest)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *SetDeliveredStatusArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *SetDeliveredStatusArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *SetDeliveredStatusArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, fmt.Errorf("No req in SetDeliveredStatusArgs")
	}
	return proto.Marshal(p.Req)
}

func (p *SetDeliveredStatusArgs) Unmarshal(in []byte) error {
	msg := new(SetDeliveredStatusRequest)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

func (p *SetDeliveredStatusArgs) GetReq() *SetDeliveredStatusRequest {
	if !p.IsSetReq() {
		return SetDeliveredStatusArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *SetDeliveredStatusArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *SetDeliveredStatusArgs) GetFirstArgument() interface{} {
	return p.Req
}

func (p *SetDeliveredStatusResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(EmptyResponse)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *SetDeliveredStatusResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *SetDeliveredStatusResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *SetDeliveredStatusResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, fmt.Errorf("No req in SetDeliveredStatusResult")
	}
	return proto.Marshal(p.Success)
}

func (p *SetDeliveredStatusResult) Unmarshal(in []byte) error {
	msg := new(EmptyResponse)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *SetDeliveredStatusResult) GetSuccess() *EmptyResponse {
	if !p.IsSetSuccess() {
		return SetDeliveredStatusResult_Success_DEFAULT
	}
	return p.Success
}

func (p *SetDeliveredStatusResult) SetSuccess(x interface{}) {
	p.Success = x.(*EmptyResponse)
}

func (p *SetDeliveredStatusResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *SetDeliveredStatusResult) GetResult() interface{} {
	return p.Success
}

func (p *UpdateProductArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(ChangeProductRequest)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *UpdateProductArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *UpdateProductArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *UpdateProductArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, fmt.Errorf("No req in UpdateProductArgs")
	}
	return proto.Marshal(p.Req)
}

func (p *UpdateProductArgs) Unmarshal(in []byte) error {
	msg := new(ChangeProductRequest)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

func (p *UpdateProductArgs) GetReq() *ChangeProductRequest {
	if !p.IsSetReq() {
		return UpdateProductArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *UpdateProductArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *UpdateProductArgs) GetFirstArgument() interface{} {
	return p.Req
}

func (p *UpdateProductResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(EmptyResponse)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *UpdateProductResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *UpdateProductResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *UpdateProductResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, fmt.Errorf("No req in UpdateProductResult")
	}
	return proto.Marshal(p.Success)
}

func (p *UpdateProductResult) Unmarshal(in []byte) error {
	msg := new(EmptyResponse)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *UpdateProductResult) GetSuccess() *EmptyResponse {
	if !p.IsSetSuccess() {
		return UpdateProductResult_Success_DEFAULT
	}
	return p.Success
}

func (p *UpdateProductResult) SetSuccess(x interface{}) {
	p.Success = x.(*EmptyResponse)
}

func (p *UpdateProductResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *UpdateProductResult) GetResult() interface{} {
	return p.Success
}

func (p *RemoveProductArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(RemoveProductRequest)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *RemoveProductArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *RemoveProductArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *RemoveProductArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, fmt.Errorf("No req in RemoveProductArgs")
	}
	return proto.Marshal(p.Req)
}

func (p *RemoveProductArgs) Unmarshal(in []byte) error {
	msg := new(RemoveProductRequest)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

func (p *RemoveProductArgs) GetReq() *RemoveProductRequest {
	if !p.IsSetReq() {
		return RemoveProductArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *RemoveProductArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *RemoveProductArgs) GetFirstArgument() interface{} {
	return p.Req
}

func (p *RemoveProductResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(EmptyResponse)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *RemoveProductResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *RemoveProductResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *RemoveProductResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, fmt.Errorf("No req in RemoveProductResult")
	}
	return proto.Marshal(p.Success)
}

func (p *RemoveProductResult) Unmarshal(in []byte) error {
	msg := new(EmptyResponse)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *RemoveProductResult) GetSuccess() *EmptyResponse {
	if !p.IsSetSuccess() {
		return RemoveProductResult_Success_DEFAULT
	}
	return p.Success
}

func (p *RemoveProductResult) SetSuccess(x interface{}) {
	p.Success = x.(*EmptyResponse)
}

func (p *RemoveProductResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *RemoveProductResult) GetResult() interface{} {
	return p.Success
}

func (p *UpdateStockpileArgs) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetReq() {
		p.Req = new(UpdateStockpileRequest)
	}
	return p.Req.FastRead(buf, _type, number)
}

func (p *UpdateStockpileArgs) FastWrite(buf []byte) (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.FastWrite(buf)
}

func (p *UpdateStockpileArgs) Size() (n int) {
	if !p.IsSetReq() {
		return 0
	}
	return p.Req.Size()
}

func (p *UpdateStockpileArgs) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetReq() {
		return out, fmt.Errorf("No req in UpdateStockpileArgs")
	}
	return proto.Marshal(p.Req)
}

func (p *UpdateStockpileArgs) Unmarshal(in []byte) error {
	msg := new(UpdateStockpileRequest)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Req = msg
	return nil
}

func (p *UpdateStockpileArgs) GetReq() *UpdateStockpileRequest {
	if !p.IsSetReq() {
		return UpdateStockpileArgs_Req_DEFAULT
	}
	return p.Req
}

func (p *UpdateStockpileArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *UpdateStockpileArgs) GetFirstArgument() interface{} {
	return p.Req
}

func (p *UpdateStockpileResult) FastRead(buf []byte, _type int8, number int32) (n int, err error) {
	if !p.IsSetSuccess() {
		p.Success = new(EmptyResponse)
	}
	return p.Success.FastRead(buf, _type, number)
}

func (p *UpdateStockpileResult) FastWrite(buf []byte) (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.FastWrite(buf)
}

func (p *UpdateStockpileResult) Size() (n int) {
	if !p.IsSetSuccess() {
		return 0
	}
	return p.Success.Size()
}

func (p *UpdateStockpileResult) Marshal(out []byte) ([]byte, error) {
	if !p.IsSetSuccess() {
		return out, fmt.Errorf("No req in UpdateStockpileResult")
	}
	return proto.Marshal(p.Success)
}

func (p *UpdateStockpileResult) Unmarshal(in []byte) error {
	msg := new(EmptyResponse)
	if err := proto.Unmarshal(in, msg); err != nil {
		return err
	}
	p.Success = msg
	return nil
}

func (p *UpdateStockpileResult) GetSuccess() *EmptyResponse {
	if !p.IsSetSuccess() {
		return UpdateStockpileResult_Success_DEFAULT
	}
	return p.Success
}

func (p *UpdateStockpileResult) SetSuccess(x interface{}) {
	p.Success = x.(*EmptyResponse)
}

func (p *UpdateStockpileResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *UpdateStockpileResult) GetResult() interface{} {
	return p.Success
}

func (x DeliveredStatus) Enum() *DeliveredStatus {
	p := new(DeliveredStatus)
	*p = x
	return p
}

func (x DeliveredStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DeliveredStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_idl_warehouse_proto_enumTypes[0].Descriptor()
}

func (DeliveredStatus) Type() protoreflect.EnumType {
	return &file_idl_warehouse_proto_enumTypes[0]
}

func (x DeliveredStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DeliveredStatus.Descriptor instead.
func (DeliveredStatus) EnumDescriptor() ([]byte, []int) {
	return file_idl_warehouse_proto_rawDescGZIP(), []int{0}
}

func (x *Advertisement) Reset() {
	*x = Advertisement{}
	if protoimpl.UnsafeEnabled {
		mi := &file_idl_warehouse_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Advertisement) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Advertisement) ProtoMessage() {}

func (x *Advertisement) ProtoReflect() protoreflect.Message {
	mi := &file_idl_warehouse_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Advertisement.ProtoReflect.Descriptor instead.
func (*Advertisement) Descriptor() ([]byte, []int) {
	return file_idl_warehouse_proto_rawDescGZIP(), []int{0}
}

func (x *Advertisement) GetImage() string {
	if x != nil {
		return x.Image
	}
	return ""
}

func (x *Advertisement) GetProductId() int64 {
	if x != nil {
		return x.ProductId
	}
	return 0
}

func (x *Specification) Reset() {
	*x = Specification{}
	if protoimpl.UnsafeEnabled {
		mi := &file_idl_warehouse_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Specification) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Specification) ProtoMessage() {}

func (x *Specification) ProtoReflect() protoreflect.Message {
	mi := &file_idl_warehouse_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Specification.ProtoReflect.Descriptor instead.
func (*Specification) Descriptor() ([]byte, []int) {
	return file_idl_warehouse_proto_rawDescGZIP(), []int{1}
}

func (x *Specification) GetItem() string {
	if x != nil {
		return x.Item
	}
	return ""
}

func (x *Specification) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

func (x *Specification) GetProductId() int64 {
	if x != nil {
		return x.ProductId
	}
	return 0
}

func (x *Product) Reset() {
	*x = Product{}
	if protoimpl.UnsafeEnabled {
		mi := &file_idl_warehouse_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Product) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Product) ProtoMessage() {}

func (x *Product) ProtoReflect() protoreflect.Message {
	mi := &file_idl_warehouse_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Product.ProtoReflect.Descriptor instead.
func (*Product) Descriptor() ([]byte, []int) {
	return file_idl_warehouse_proto_rawDescGZIP(), []int{2}
}

func (x *Product) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *Product) GetPrice() float64 {
	if x != nil {
		return x.Price
	}
	return 0
}

func (x *Product) GetRate() float32 {
	if x != nil {
		return x.Rate
	}
	return 0
}

func (x *Product) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *Product) GetCover() string {
	if x != nil {
		return x.Cover
	}
	return ""
}

func (x *Product) GetDetail() string {
	if x != nil {
		return x.Detail
	}
	return ""
}

func (x *Product) GetSpecifications() []*Specification {
	if x != nil {
		return x.Specifications
	}
	return nil
}

func (x *Stockpile) Reset() {
	*x = Stockpile{}
	if protoimpl.UnsafeEnabled {
		mi := &file_idl_warehouse_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Stockpile) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Stockpile) ProtoMessage() {}

func (x *Stockpile) ProtoReflect() protoreflect.Message {
	mi := &file_idl_warehouse_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Stockpile.ProtoReflect.Descriptor instead.
func (*Stockpile) Descriptor() ([]byte, []int) {
	return file_idl_warehouse_proto_rawDescGZIP(), []int{3}
}

func (x *Stockpile) GetAmount() int64 {
	if x != nil {
		return x.Amount
	}
	return 0
}

func (x *Stockpile) GetFrozen() int64 {
	if x != nil {
		return x.Frozen
	}
	return 0
}

func (x *Stockpile) GetProduct() *Product {
	if x != nil {
		return x.Product
	}
	return nil
}

func (x *EmptyResponse) Reset() {
	*x = EmptyResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_idl_warehouse_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EmptyResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EmptyResponse) ProtoMessage() {}

func (x *EmptyResponse) ProtoReflect() protoreflect.Message {
	mi := &file_idl_warehouse_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EmptyResponse.ProtoReflect.Descriptor instead.
func (*EmptyResponse) Descriptor() ([]byte, []int) {
	return file_idl_warehouse_proto_rawDescGZIP(), []int{4}
}

func (x *GetAllAdvertisementsResponse) Reset() {
	*x = GetAllAdvertisementsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_idl_warehouse_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetAllAdvertisementsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAllAdvertisementsResponse) ProtoMessage() {}

func (x *GetAllAdvertisementsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_idl_warehouse_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAllAdvertisementsResponse.ProtoReflect.Descriptor instead.
func (*GetAllAdvertisementsResponse) Descriptor() ([]byte, []int) {
	return file_idl_warehouse_proto_rawDescGZIP(), []int{5}
}

func (x *GetAllAdvertisementsResponse) GetAdvertisements() []*Advertisement {
	if x != nil {
		return x.Advertisements
	}
	return nil
}

func (x *GetAllProductResponse) Reset() {
	*x = GetAllProductResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_idl_warehouse_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetAllProductResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAllProductResponse) ProtoMessage() {}

func (x *GetAllProductResponse) ProtoReflect() protoreflect.Message {
	mi := &file_idl_warehouse_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAllProductResponse.ProtoReflect.Descriptor instead.
func (*GetAllProductResponse) Descriptor() ([]byte, []int) {
	return file_idl_warehouse_proto_rawDescGZIP(), []int{6}
}

func (x *GetAllProductResponse) GetProducts() []*Product {
	if x != nil {
		return x.Products
	}
	return nil
}

func (x *GetProductRequest) Reset() {
	*x = GetProductRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_idl_warehouse_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetProductRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetProductRequest) ProtoMessage() {}

func (x *GetProductRequest) ProtoReflect() protoreflect.Message {
	mi := &file_idl_warehouse_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetProductRequest.ProtoReflect.Descriptor instead.
func (*GetProductRequest) Descriptor() ([]byte, []int) {
	return file_idl_warehouse_proto_rawDescGZIP(), []int{7}
}

func (x *GetProductRequest) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *RemoveProductRequest) Reset() {
	*x = RemoveProductRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_idl_warehouse_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RemoveProductRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RemoveProductRequest) ProtoMessage() {}

func (x *RemoveProductRequest) ProtoReflect() protoreflect.Message {
	mi := &file_idl_warehouse_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RemoveProductRequest.ProtoReflect.Descriptor instead.
func (*RemoveProductRequest) Descriptor() ([]byte, []int) {
	return file_idl_warehouse_proto_rawDescGZIP(), []int{8}
}

func (x *RemoveProductRequest) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *GetProductResponse) Reset() {
	*x = GetProductResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_idl_warehouse_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetProductResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetProductResponse) ProtoMessage() {}

func (x *GetProductResponse) ProtoReflect() protoreflect.Message {
	mi := &file_idl_warehouse_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetProductResponse.ProtoReflect.Descriptor instead.
func (*GetProductResponse) Descriptor() ([]byte, []int) {
	return file_idl_warehouse_proto_rawDescGZIP(), []int{9}
}

func (x *GetProductResponse) GetProduct() *Product {
	if x != nil {
		return x.Product
	}
	return nil
}

func (x *ChangeProductRequest) Reset() {
	*x = ChangeProductRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_idl_warehouse_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChangeProductRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChangeProductRequest) ProtoMessage() {}

func (x *ChangeProductRequest) ProtoReflect() protoreflect.Message {
	mi := &file_idl_warehouse_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChangeProductRequest.ProtoReflect.Descriptor instead.
func (*ChangeProductRequest) Descriptor() ([]byte, []int) {
	return file_idl_warehouse_proto_rawDescGZIP(), []int{10}
}

func (x *ChangeProductRequest) GetProduct() *Product {
	if x != nil {
		return x.Product
	}
	return nil
}

func (x *UpdateStockpileRequest) Reset() {
	*x = UpdateStockpileRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_idl_warehouse_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateStockpileRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateStockpileRequest) ProtoMessage() {}

func (x *UpdateStockpileRequest) ProtoReflect() protoreflect.Message {
	mi := &file_idl_warehouse_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateStockpileRequest.ProtoReflect.Descriptor instead.
func (*UpdateStockpileRequest) Descriptor() ([]byte, []int) {
	return file_idl_warehouse_proto_rawDescGZIP(), []int{11}
}

func (x *UpdateStockpileRequest) GetProductId() int64 {
	if x != nil {
		return x.ProductId
	}
	return 0
}

func (x *UpdateStockpileRequest) GetAmount() int64 {
	if x != nil {
		return x.Amount
	}
	return 0
}

func (x *QueryStockpileRequest) Reset() {
	*x = QueryStockpileRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_idl_warehouse_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryStockpileRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryStockpileRequest) ProtoMessage() {}

func (x *QueryStockpileRequest) ProtoReflect() protoreflect.Message {
	mi := &file_idl_warehouse_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryStockpileRequest.ProtoReflect.Descriptor instead.
func (*QueryStockpileRequest) Descriptor() ([]byte, []int) {
	return file_idl_warehouse_proto_rawDescGZIP(), []int{12}
}

func (x *QueryStockpileRequest) GetProductId() int64 {
	if x != nil {
		return x.ProductId
	}
	return 0
}

func (x *QueryStockpileResponse) Reset() {
	*x = QueryStockpileResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_idl_warehouse_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *QueryStockpileResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*QueryStockpileResponse) ProtoMessage() {}

func (x *QueryStockpileResponse) ProtoReflect() protoreflect.Message {
	mi := &file_idl_warehouse_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use QueryStockpileResponse.ProtoReflect.Descriptor instead.
func (*QueryStockpileResponse) Descriptor() ([]byte, []int) {
	return file_idl_warehouse_proto_rawDescGZIP(), []int{13}
}

func (x *QueryStockpileResponse) GetStockpile() *Stockpile {
	if x != nil {
		return x.Stockpile
	}
	return nil
}

func (x *SetDeliveredStatusRequest) Reset() {
	*x = SetDeliveredStatusRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_idl_warehouse_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetDeliveredStatusRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetDeliveredStatusRequest) ProtoMessage() {}

func (x *SetDeliveredStatusRequest) ProtoReflect() protoreflect.Message {
	mi := &file_idl_warehouse_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetDeliveredStatusRequest.ProtoReflect.Descriptor instead.
func (*SetDeliveredStatusRequest) Descriptor() ([]byte, []int) {
	return file_idl_warehouse_proto_rawDescGZIP(), []int{14}
}

func (x *SetDeliveredStatusRequest) GetProductId() int64 {
	if x != nil {
		return x.ProductId
	}
	return 0
}

func (x *SetDeliveredStatusRequest) GetAmount() int64 {
	if x != nil {
		return x.Amount
	}
	return 0
}

func (x *SetDeliveredStatusRequest) GetStatus() DeliveredStatus {
	if x != nil {
		return x.Status
	}
	return DeliveredStatus_DECREASE
}

var File_idl_warehouse_proto protoreflect.FileDescriptor

var file_idl_warehouse_proto_rawDesc = []byte{
	0x0a, 0x13, 0x69, 0x64, 0x6c, 0x2f, 0x77, 0x61, 0x72, 0x65, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x09, 0x77, 0x61, 0x72, 0x65, 0x68, 0x6f, 0x75, 0x73, 0x65,
	0x22, 0x43, 0x0a, 0x0d, 0x41, 0x64, 0x76, 0x65, 0x72, 0x74, 0x69, 0x73, 0x65, 0x6d, 0x65, 0x6e,
	0x74, 0x12, 0x14, 0x0a, 0x05, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x69, 0x6d, 0x61, 0x67, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x70, 0x72, 0x6f, 0x64, 0x75,
	0x63, 0x74, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x64,
	0x75, 0x63, 0x74, 0x49, 0x64, 0x22, 0x57, 0x0a, 0x0d, 0x53, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x69, 0x74, 0x65, 0x6d, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x69, 0x74, 0x65, 0x6d, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x12, 0x1c, 0x0a, 0x09, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x49, 0x64, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x49, 0x64, 0x22, 0xdb,
	0x01, 0x0a, 0x07, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x69,
	0x74, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65,
	0x12, 0x14, 0x0a, 0x05, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x52,
	0x05, 0x70, 0x72, 0x69, 0x63, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x72, 0x61, 0x74, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x02, 0x52, 0x04, 0x72, 0x61, 0x74, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65,
	0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x14, 0x0a, 0x05,
	0x63, 0x6f, 0x76, 0x65, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x63, 0x6f, 0x76,
	0x65, 0x72, 0x12, 0x16, 0x0a, 0x06, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x12, 0x40, 0x0a, 0x0e, 0x73, 0x70,
	0x65, 0x63, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x07, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x18, 0x2e, 0x77, 0x61, 0x72, 0x65, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x2e, 0x53,
	0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0e, 0x73, 0x70,
	0x65, 0x63, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0x69, 0x0a, 0x09,
	0x53, 0x74, 0x6f, 0x63, 0x6b, 0x70, 0x69, 0x6c, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x6d, 0x6f,
	0x75, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e,
	0x74, 0x12, 0x16, 0x0a, 0x06, 0x66, 0x72, 0x6f, 0x7a, 0x65, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x06, 0x66, 0x72, 0x6f, 0x7a, 0x65, 0x6e, 0x12, 0x2c, 0x0a, 0x07, 0x70, 0x72, 0x6f,
	0x64, 0x75, 0x63, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x77, 0x61, 0x72,
	0x65, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x2e, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x52, 0x07,
	0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x22, 0x0f, 0x0a, 0x0d, 0x45, 0x6d, 0x70, 0x74, 0x79,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x60, 0x0a, 0x1c, 0x47, 0x65, 0x74, 0x41,
	0x6c, 0x6c, 0x41, 0x64, 0x76, 0x65, 0x72, 0x74, 0x69, 0x73, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x40, 0x0a, 0x0e, 0x61, 0x64, 0x76, 0x65,
	0x72, 0x74, 0x69, 0x73, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x18, 0x2e, 0x77, 0x61, 0x72, 0x65, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x2e, 0x41, 0x64, 0x76,
	0x65, 0x72, 0x74, 0x69, 0x73, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x0e, 0x61, 0x64, 0x76, 0x65,
	0x72, 0x74, 0x69, 0x73, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x22, 0x47, 0x0a, 0x15, 0x47, 0x65,
	0x74, 0x41, 0x6c, 0x6c, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x2e, 0x0a, 0x08, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x73, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x77, 0x61, 0x72, 0x65, 0x68, 0x6f, 0x75, 0x73,
	0x65, 0x2e, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x52, 0x08, 0x70, 0x72, 0x6f, 0x64, 0x75,
	0x63, 0x74, 0x73, 0x22, 0x23, 0x0a, 0x11, 0x47, 0x65, 0x74, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63,
	0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x22, 0x26, 0x0a, 0x14, 0x52, 0x65, 0x6d, 0x6f,
	0x76, 0x65, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64,
	0x22, 0x42, 0x0a, 0x12, 0x47, 0x65, 0x74, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2c, 0x0a, 0x07, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63,
	0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x77, 0x61, 0x72, 0x65, 0x68, 0x6f,
	0x75, 0x73, 0x65, 0x2e, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x52, 0x07, 0x70, 0x72, 0x6f,
	0x64, 0x75, 0x63, 0x74, 0x22, 0x44, 0x0a, 0x14, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x50, 0x72,
	0x6f, 0x64, 0x75, 0x63, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2c, 0x0a, 0x07,
	0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e,
	0x77, 0x61, 0x72, 0x65, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x2e, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63,
	0x74, 0x52, 0x07, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x22, 0x4e, 0x0a, 0x16, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x70, 0x69, 0x6c, 0x65, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x49,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74,
	0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0x35, 0x0a, 0x15, 0x51, 0x75,
	0x65, 0x72, 0x79, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x70, 0x69, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x49, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x49,
	0x64, 0x22, 0x4c, 0x0a, 0x16, 0x51, 0x75, 0x65, 0x72, 0x79, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x70,
	0x69, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x32, 0x0a, 0x09, 0x73,
	0x74, 0x6f, 0x63, 0x6b, 0x70, 0x69, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14,
	0x2e, 0x77, 0x61, 0x72, 0x65, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x2e, 0x53, 0x74, 0x6f, 0x63, 0x6b,
	0x70, 0x69, 0x6c, 0x65, 0x52, 0x09, 0x73, 0x74, 0x6f, 0x63, 0x6b, 0x70, 0x69, 0x6c, 0x65, 0x22,
	0x85, 0x01, 0x0a, 0x19, 0x53, 0x65, 0x74, 0x44, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x65, 0x64,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1c, 0x0a,
	0x09, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x09, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x61,
	0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x61, 0x6d, 0x6f,
	0x75, 0x6e, 0x74, 0x12, 0x32, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x1a, 0x2e, 0x77, 0x61, 0x72, 0x65, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x2e,
	0x44, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x65, 0x64, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52,
	0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x2a, 0x45, 0x0a, 0x0f, 0x44, 0x65, 0x6c, 0x69, 0x76,
	0x65, 0x72, 0x65, 0x64, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x0c, 0x0a, 0x08, 0x44, 0x45,
	0x43, 0x52, 0x45, 0x41, 0x53, 0x45, 0x10, 0x00, 0x12, 0x0c, 0x0a, 0x08, 0x49, 0x4e, 0x43, 0x52,
	0x45, 0x41, 0x53, 0x45, 0x10, 0x01, 0x12, 0x0a, 0x0a, 0x06, 0x46, 0x52, 0x4f, 0x5a, 0x45, 0x4e,
	0x10, 0x02, 0x12, 0x0a, 0x0a, 0x06, 0x54, 0x48, 0x41, 0x57, 0x45, 0x44, 0x10, 0x03, 0x32, 0xe3,
	0x05, 0x0a, 0x0c, 0x57, 0x61, 0x72, 0x65, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x41, 0x70, 0x69, 0x12,
	0x59, 0x0a, 0x14, 0x47, 0x65, 0x74, 0x41, 0x6c, 0x6c, 0x41, 0x64, 0x76, 0x65, 0x72, 0x74, 0x69,
	0x73, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x18, 0x2e, 0x77, 0x61, 0x72, 0x65, 0x68, 0x6f,
	0x75, 0x73, 0x65, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x1a, 0x27, 0x2e, 0x77, 0x61, 0x72, 0x65, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x2e, 0x47, 0x65,
	0x74, 0x41, 0x6c, 0x6c, 0x41, 0x64, 0x76, 0x65, 0x72, 0x74, 0x69, 0x73, 0x65, 0x6d, 0x65, 0x6e,
	0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4c, 0x0a, 0x0e, 0x47, 0x65,
	0x74, 0x41, 0x6c, 0x6c, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x73, 0x12, 0x18, 0x2e, 0x77,
	0x61, 0x72, 0x65, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x1a, 0x20, 0x2e, 0x77, 0x61, 0x72, 0x65, 0x68, 0x6f, 0x75,
	0x73, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x41, 0x6c, 0x6c, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x49, 0x0a, 0x0a, 0x47, 0x65, 0x74, 0x50,
	0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x12, 0x1c, 0x2e, 0x77, 0x61, 0x72, 0x65, 0x68, 0x6f, 0x75,
	0x73, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x1d, 0x2e, 0x77, 0x61, 0x72, 0x65, 0x68, 0x6f, 0x75, 0x73, 0x65,
	0x2e, 0x47, 0x65, 0x74, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x4a, 0x0a, 0x0d, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x50, 0x72, 0x6f,
	0x64, 0x75, 0x63, 0x74, 0x12, 0x1f, 0x2e, 0x77, 0x61, 0x72, 0x65, 0x68, 0x6f, 0x75, 0x73, 0x65,
	0x2e, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x18, 0x2e, 0x77, 0x61, 0x72, 0x65, 0x68, 0x6f, 0x75, 0x73,
	0x65, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x4a, 0x0a, 0x0d, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74,
	0x12, 0x1f, 0x2e, 0x77, 0x61, 0x72, 0x65, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x2e, 0x43, 0x68, 0x61,
	0x6e, 0x67, 0x65, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x18, 0x2e, 0x77, 0x61, 0x72, 0x65, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x2e, 0x45, 0x6d,
	0x70, 0x74, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4a, 0x0a, 0x0d, 0x52,
	0x65, 0x6d, 0x6f, 0x76, 0x65, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x12, 0x1f, 0x2e, 0x77,
	0x61, 0x72, 0x65, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x2e, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x50,
	0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x18, 0x2e,
	0x77, 0x61, 0x72, 0x65, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4e, 0x0a, 0x0f, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x53, 0x74, 0x6f, 0x63, 0x6b, 0x70, 0x69, 0x6c, 0x65, 0x12, 0x21, 0x2e, 0x77, 0x61, 0x72,
	0x65, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x74, 0x6f,
	0x63, 0x6b, 0x70, 0x69, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x18, 0x2e,
	0x77, 0x61, 0x72, 0x65, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x55, 0x0a, 0x0e, 0x51, 0x75, 0x65, 0x72, 0x79,
	0x53, 0x74, 0x6f, 0x63, 0x6b, 0x70, 0x69, 0x6c, 0x65, 0x12, 0x20, 0x2e, 0x77, 0x61, 0x72, 0x65,
	0x68, 0x6f, 0x75, 0x73, 0x65, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x53, 0x74, 0x6f, 0x63, 0x6b,
	0x70, 0x69, 0x6c, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x21, 0x2e, 0x77, 0x61,
	0x72, 0x65, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x2e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x53, 0x74, 0x6f,
	0x63, 0x6b, 0x70, 0x69, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x54,
	0x0a, 0x12, 0x53, 0x65, 0x74, 0x44, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x65, 0x64, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x12, 0x24, 0x2e, 0x77, 0x61, 0x72, 0x65, 0x68, 0x6f, 0x75, 0x73, 0x65,
	0x2e, 0x53, 0x65, 0x74, 0x44, 0x65, 0x6c, 0x69, 0x76, 0x65, 0x72, 0x65, 0x64, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x18, 0x2e, 0x77, 0x61, 0x72,
	0x65, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x42, 0x5c, 0x5a, 0x5a, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63,
	0x6f, 0x6d, 0x2f, 0x57, 0x65, 0x61, 0x78, 0x73, 0x2f, 0x6d, 0x69, 0x63, 0x72, 0x6f, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x67, 0x6f, 0x5f, 0x6b, 0x75, 0x62, 0x65, 0x72, 0x6e, 0x65,
	0x74, 0x65, 0x73, 0x2f, 0x62, 0x6f, 0x6f, 0x6b, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x2d, 0x64, 0x6f,
	0x6d, 0x61, 0x69, 0x6e, 0x2d, 0x77, 0x61, 0x72, 0x65, 0x68, 0x6f, 0x75, 0x73, 0x65, 0x2f, 0x6b,
	0x69, 0x74, 0x65, 0x78, 0x5f, 0x67, 0x65, 0x6e, 0x2f, 0x77, 0x61, 0x72, 0x65, 0x68, 0x6f, 0x75,
	0x73, 0x65, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_idl_warehouse_proto_rawDescOnce sync.Once
	file_idl_warehouse_proto_rawDescData = file_idl_warehouse_proto_rawDesc
)

func file_idl_warehouse_proto_rawDescGZIP() []byte {
	file_idl_warehouse_proto_rawDescOnce.Do(func() {
		file_idl_warehouse_proto_rawDescData = protoimpl.X.CompressGZIP(file_idl_warehouse_proto_rawDescData)
	})
	return file_idl_warehouse_proto_rawDescData
}

var file_idl_warehouse_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_idl_warehouse_proto_msgTypes = make([]protoimpl.MessageInfo, 15)
var file_idl_warehouse_proto_goTypes = []interface{}{
	(DeliveredStatus)(0),                 // 0: warehouse.DeliveredStatus
	(*Advertisement)(nil),                // 1: warehouse.Advertisement
	(*Specification)(nil),                // 2: warehouse.Specification
	(*Product)(nil),                      // 3: warehouse.Product
	(*Stockpile)(nil),                    // 4: warehouse.Stockpile
	(*EmptyResponse)(nil),                // 5: warehouse.EmptyResponse
	(*GetAllAdvertisementsResponse)(nil), // 6: warehouse.GetAllAdvertisementsResponse
	(*GetAllProductResponse)(nil),        // 7: warehouse.GetAllProductResponse
	(*GetProductRequest)(nil),            // 8: warehouse.GetProductRequest
	(*RemoveProductRequest)(nil),         // 9: warehouse.RemoveProductRequest
	(*GetProductResponse)(nil),           // 10: warehouse.GetProductResponse
	(*ChangeProductRequest)(nil),         // 11: warehouse.ChangeProductRequest
	(*UpdateStockpileRequest)(nil),       // 12: warehouse.UpdateStockpileRequest
	(*QueryStockpileRequest)(nil),        // 13: warehouse.QueryStockpileRequest
	(*QueryStockpileResponse)(nil),       // 14: warehouse.QueryStockpileResponse
	(*SetDeliveredStatusRequest)(nil),    // 15: warehouse.SetDeliveredStatusRequest
}
var file_idl_warehouse_proto_depIdxs = []int32{
	2,  // 0: warehouse.Product.specifications:type_name -> warehouse.Specification
	3,  // 1: warehouse.Stockpile.product:type_name -> warehouse.Product
	1,  // 2: warehouse.GetAllAdvertisementsResponse.advertisements:type_name -> warehouse.Advertisement
	3,  // 3: warehouse.GetAllProductResponse.products:type_name -> warehouse.Product
	3,  // 4: warehouse.GetProductResponse.product:type_name -> warehouse.Product
	3,  // 5: warehouse.ChangeProductRequest.product:type_name -> warehouse.Product
	4,  // 6: warehouse.QueryStockpileResponse.stockpile:type_name -> warehouse.Stockpile
	0,  // 7: warehouse.SetDeliveredStatusRequest.status:type_name -> warehouse.DeliveredStatus
	5,  // 8: warehouse.WarehouseApi.GetAllAdvertisements:input_type -> warehouse.EmptyResponse
	5,  // 9: warehouse.WarehouseApi.GetAllProducts:input_type -> warehouse.EmptyResponse
	8,  // 10: warehouse.WarehouseApi.GetProduct:input_type -> warehouse.GetProductRequest
	11, // 11: warehouse.WarehouseApi.CreateProduct:input_type -> warehouse.ChangeProductRequest
	11, // 12: warehouse.WarehouseApi.UpdateProduct:input_type -> warehouse.ChangeProductRequest
	9,  // 13: warehouse.WarehouseApi.RemoveProduct:input_type -> warehouse.RemoveProductRequest
	12, // 14: warehouse.WarehouseApi.UpdateStockpile:input_type -> warehouse.UpdateStockpileRequest
	13, // 15: warehouse.WarehouseApi.QueryStockpile:input_type -> warehouse.QueryStockpileRequest
	15, // 16: warehouse.WarehouseApi.SetDeliveredStatus:input_type -> warehouse.SetDeliveredStatusRequest
	6,  // 17: warehouse.WarehouseApi.GetAllAdvertisements:output_type -> warehouse.GetAllAdvertisementsResponse
	7,  // 18: warehouse.WarehouseApi.GetAllProducts:output_type -> warehouse.GetAllProductResponse
	10, // 19: warehouse.WarehouseApi.GetProduct:output_type -> warehouse.GetProductResponse
	5,  // 20: warehouse.WarehouseApi.CreateProduct:output_type -> warehouse.EmptyResponse
	5,  // 21: warehouse.WarehouseApi.UpdateProduct:output_type -> warehouse.EmptyResponse
	5,  // 22: warehouse.WarehouseApi.RemoveProduct:output_type -> warehouse.EmptyResponse
	5,  // 23: warehouse.WarehouseApi.UpdateStockpile:output_type -> warehouse.EmptyResponse
	14, // 24: warehouse.WarehouseApi.QueryStockpile:output_type -> warehouse.QueryStockpileResponse
	5,  // 25: warehouse.WarehouseApi.SetDeliveredStatus:output_type -> warehouse.EmptyResponse
	17, // [17:26] is the sub-list for method output_type
	8,  // [8:17] is the sub-list for method input_type
	8,  // [8:8] is the sub-list for extension type_name
	8,  // [8:8] is the sub-list for extension extendee
	0,  // [0:8] is the sub-list for field type_name
}

func init() { file_idl_warehouse_proto_init() }
func file_idl_warehouse_proto_init() {
	if File_idl_warehouse_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_idl_warehouse_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Advertisement); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_idl_warehouse_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Specification); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_idl_warehouse_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Product); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_idl_warehouse_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Stockpile); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_idl_warehouse_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EmptyResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_idl_warehouse_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetAllAdvertisementsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_idl_warehouse_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetAllProductResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_idl_warehouse_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetProductRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_idl_warehouse_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RemoveProductRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_idl_warehouse_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetProductResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_idl_warehouse_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChangeProductRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_idl_warehouse_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateStockpileRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_idl_warehouse_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryStockpileRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_idl_warehouse_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*QueryStockpileResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_idl_warehouse_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetDeliveredStatusRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_idl_warehouse_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   15,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_idl_warehouse_proto_goTypes,
		DependencyIndexes: file_idl_warehouse_proto_depIdxs,
		EnumInfos:         file_idl_warehouse_proto_enumTypes,
		MessageInfos:      file_idl_warehouse_proto_msgTypes,
	}.Build()
	File_idl_warehouse_proto = out.File
	file_idl_warehouse_proto_rawDesc = nil
	file_idl_warehouse_proto_goTypes = nil
	file_idl_warehouse_proto_depIdxs = nil
}
